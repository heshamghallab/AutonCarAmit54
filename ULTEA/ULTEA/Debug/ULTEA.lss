
ULTEA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00001750  000017e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000d8  008000d8  0000185c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027ed  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf8  00000000  00000000  000042e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e6  00000000  00000000  00004ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  000062c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096c  00000000  00000000  0000681c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d3e  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00008ec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 04 	call	0x97c	; 0x97c <main>
      8a:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DCMOTOR_vidInit>:



void DCMOTOR_vidInit(void)
{
	DIO_udtSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	64 e0       	ldi	r22, 0x04	; 4
      96:	83 e0       	ldi	r24, 0x03	; 3
      98:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	63 e0       	ldi	r22, 0x03	; 3
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	63 e0       	ldi	r22, 0x03	; 3
      aa:	82 e0       	ldi	r24, 0x02	; 2
      ac:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN4,DIO_OUTPUT);
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	64 e0       	ldi	r22, 0x04	; 4
      b4:	82 e0       	ldi	r24, 0x02	; 2
      b6:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	65 e0       	ldi	r22, 0x05	; 5
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	66 e0       	ldi	r22, 0x06	; 6
      c8:	82 e0       	ldi	r24, 0x02	; 2
      ca:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
      ce:	08 95       	ret

000000d0 <DCMOTOR_vidMoveForward>:
}
void DCMOTOR_vidMoveForward(void)
{
	
	
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
      d0:	41 e0       	ldi	r20, 0x01	; 1
      d2:	63 e0       	ldi	r22, 0x03	; 3
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN4,DIO_HIGH);
      da:	41 e0       	ldi	r20, 0x01	; 1
      dc:	64 e0       	ldi	r22, 0x04	; 4
      de:	83 e0       	ldi	r24, 0x03	; 3
      e0:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);  // H_IN1
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	63 e0       	ldi	r22, 0x03	; 3
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN5,DIO_LOW);  // H_IN3
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	65 e0       	ldi	r22, 0x05	; 5
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);  // H_IN2
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	64 e0       	ldi	r22, 0x04	; 4
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN6,DIO_HIGH);  // H_IN4
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	66 e0       	ldi	r22, 0x06	; 6
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     10c:	08 95       	ret

0000010e <DCMOTOR_vidMoveBackward>:
}


void DCMOTOR_vidMoveBackward(void)
{
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
     10e:	41 e0       	ldi	r20, 0x01	; 1
     110:	63 e0       	ldi	r22, 0x03	; 3
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN4,DIO_HIGH);
     118:	41 e0       	ldi	r20, 0x01	; 1
     11a:	64 e0       	ldi	r22, 0x04	; 4
     11c:	83 e0       	ldi	r24, 0x03	; 3
     11e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);  // H_IN1
     122:	41 e0       	ldi	r20, 0x01	; 1
     124:	63 e0       	ldi	r22, 0x03	; 3
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN5,DIO_HIGH);  // H_IN3
     12c:	41 e0       	ldi	r20, 0x01	; 1
     12e:	65 e0       	ldi	r22, 0x05	; 5
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN4,DIO_LOW);  // H_IN2
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	64 e0       	ldi	r22, 0x04	; 4
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN6,DIO_LOW);  // H_IN4
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	66 e0       	ldi	r22, 0x06	; 6
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     14a:	08 95       	ret

0000014c <DCMOTOR_vidStopMotor>:
	
}

void DCMOTOR_vidStopMotor (void)
{
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	63 e0       	ldi	r22, 0x03	; 3
     150:	83 e0       	ldi	r24, 0x03	; 3
     152:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	64 e0       	ldi	r22, 0x04	; 4
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>

	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);  // H_IN1
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	63 e0       	ldi	r22, 0x03	; 3
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN5,DIO_LOW);  // H_IN3
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	65 e0       	ldi	r22, 0x05	; 5
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN4,DIO_LOW);  // H_IN2
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	64 e0       	ldi	r22, 0x04	; 4
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN6,DIO_LOW);  // H_IN4
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	66 e0       	ldi	r22, 0x06	; 6
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     188:	08 95       	ret

0000018a <SERVO_vidInit>:
}


void SERVO_vidInit(void)
{
	DIO_udtSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	65 e0       	ldi	r22, 0x05	; 5
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
     194:	08 95       	ret

00000196 <SERVO_vidLookForward>:
	//DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
}
void SERVO_vidLookForward(void)
{
	SERVO_vidSetAngle(90);
     196:	8a e5       	ldi	r24, 0x5A	; 90
     198:	0e 94 65 05 	call	0xaca	; 0xaca <SERVO_vidSetAngle>
     19c:	08 95       	ret

0000019e <SERVO_vidLookRight>:
	
	
}
void SERVO_vidLookRight(void)
{
		SERVO_vidSetAngle(30);
     19e:	8e e1       	ldi	r24, 0x1E	; 30
     1a0:	0e 94 65 05 	call	0xaca	; 0xaca <SERVO_vidSetAngle>
     1a4:	08 95       	ret

000001a6 <SERVO_vidLookLeft>:
		
		
}
void SERVO_vidLookLeft(void)
{
		SERVO_vidSetAngle(160);
     1a6:	80 ea       	ldi	r24, 0xA0	; 160
     1a8:	0e 94 65 05 	call	0xaca	; 0xaca <SERVO_vidSetAngle>
     1ac:	08 95       	ret

000001ae <DCMOTOR_vidTurnRight>:
	
}

void DCMOTOR_vidTurnRight(void)
{
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);  // H_IN1
     1ae:	41 e0       	ldi	r20, 0x01	; 1
     1b0:	63 e0       	ldi	r22, 0x03	; 3
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN5,DIO_LOW);  // H_IN3
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	65 e0       	ldi	r22, 0x05	; 5
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN4,DIO_LOW);  // H_IN2
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	64 e0       	ldi	r22, 0x04	; 4
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN6,DIO_HIGH);  // H_IN4
     1cc:	41 e0       	ldi	r20, 0x01	; 1
     1ce:	66 e0       	ldi	r22, 0x06	; 6
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	TIMER0_vidSyncSecondsDelay(1);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	DCMOTOR_vidStopMotor();
     1de:	0e 94 a6 00 	call	0x14c	; 0x14c <DCMOTOR_vidStopMotor>
	TIMER0_vidSyncSecondsDelay(1);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	DCMOTOR_vidMoveForward();
     1ea:	0e 94 68 00 	call	0xd0	; 0xd0 <DCMOTOR_vidMoveForward>
     1ee:	08 95       	ret

000001f0 <DCMOTOR_vidTurnLeft>:
	
}
void DCMOTOR_vidTurnLeft(void)
{
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);  // H_IN1
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	63 e0       	ldi	r22, 0x03	; 3
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN5,DIO_HIGH);  // H_IN3
     1fa:	41 e0       	ldi	r20, 0x01	; 1
     1fc:	65 e0       	ldi	r22, 0x05	; 5
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);  // H_IN2
     204:	41 e0       	ldi	r20, 0x01	; 1
     206:	64 e0       	ldi	r22, 0x04	; 4
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN6,DIO_LOW);  // H_IN4
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	66 e0       	ldi	r22, 0x06	; 6
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	TIMER0_vidSyncSecondsDelay(1);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	DCMOTOR_vidStopMotor();
     220:	0e 94 a6 00 	call	0x14c	; 0x14c <DCMOTOR_vidStopMotor>
	TIMER0_vidSyncSecondsDelay(1);
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	DCMOTOR_vidMoveForward();
     22c:	0e 94 68 00 	call	0xd0	; 0xd0 <DCMOTOR_vidMoveForward>
     230:	08 95       	ret

00000232 <DIO_udtSetPinDirection>:
	uint8 u8Direction
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK ; 
	
	if(u8Direction == DIO_OUTPUT)
     232:	41 11       	cpse	r20, r1
     234:	38 c0       	rjmp	.+112    	; 0x2a6 <DIO_udtSetPinDirection+0x74>
	{
		switch (u8Port)
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	91 f0       	breq	.+36     	; 0x25e <DIO_udtSetPinDirection+0x2c>
     23a:	28 f0       	brcs	.+10     	; 0x246 <DIO_udtSetPinDirection+0x14>
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	d9 f0       	breq	.+54     	; 0x276 <DIO_udtSetPinDirection+0x44>
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	29 f1       	breq	.+74     	; 0x28e <DIO_udtSetPinDirection+0x5c>
     244:	6e c0       	rjmp	.+220    	; 0x322 <DIO_udtSetPinDirection+0xf0>
		{
		case DIO_PORTA: SET_BIT(DDRA,u8Pin); 
     246:	2a b3       	in	r18, 0x1a	; 26
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_udtSetPinDirection+0x20>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	6a 95       	dec	r22
     254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_udtSetPinDirection+0x1c>
     256:	82 2b       	or	r24, r18
     258:	8a bb       	out	0x1a, r24	; 26
			 udtReturnValue = E_OK;
     25a:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     25c:	08 95       	ret
			 
		case DIO_PORTB: SET_BIT(DDRB,u8Pin);
     25e:	27 b3       	in	r18, 0x17	; 23
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_udtSetPinDirection+0x38>
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	6a 95       	dec	r22
     26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_udtSetPinDirection+0x34>
     26e:	82 2b       	or	r24, r18
     270:	87 bb       	out	0x17, r24	; 23
		     udtReturnValue = E_OK; 
     272:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     274:	08 95       	ret
			 
		case DIO_PORTC: SET_BIT(DDRC,u8Pin);
     276:	24 b3       	in	r18, 0x14	; 20
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_udtSetPinDirection+0x50>
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	6a 95       	dec	r22
     284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_udtSetPinDirection+0x4c>
     286:	82 2b       	or	r24, r18
     288:	84 bb       	out	0x14, r24	; 20
		     udtReturnValue = E_OK;
     28a:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     28c:	08 95       	ret
			 
		case DIO_PORTD: SET_BIT(DDRD,u8Pin);
     28e:	21 b3       	in	r18, 0x11	; 17
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_udtSetPinDirection+0x68>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_udtSetPinDirection+0x64>
     29e:	82 2b       	or	r24, r18
     2a0:	81 bb       	out	0x11, r24	; 17
		     udtReturnValue = E_OK; 
     2a2:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     2a4:	08 95       	ret
			 /*!Comment: Do nothing */
			 break;
		}
		
	}
	else if (u8Direction == DIO_INPUT)
     2a6:	41 30       	cpi	r20, 0x01	; 1
     2a8:	f1 f5       	brne	.+124    	; 0x326 <DIO_udtSetPinDirection+0xf4>
	{
	switch (u8Port)
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	99 f0       	breq	.+38     	; 0x2d4 <DIO_udtSetPinDirection+0xa2>
     2ae:	28 f0       	brcs	.+10     	; 0x2ba <DIO_udtSetPinDirection+0x88>
     2b0:	82 30       	cpi	r24, 0x02	; 2
     2b2:	e9 f0       	breq	.+58     	; 0x2ee <DIO_udtSetPinDirection+0xbc>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	41 f1       	breq	.+80     	; 0x308 <DIO_udtSetPinDirection+0xd6>
     2b8:	38 c0       	rjmp	.+112    	; 0x32a <DIO_udtSetPinDirection+0xf8>
		{
		case DIO_PORTA: CLR_BIT(DDRA,u8Pin); 
     2ba:	2a b3       	in	r18, 0x1a	; 26
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_udtSetPinDirection+0x94>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_udtSetPinDirection+0x90>
     2ca:	80 95       	com	r24
     2cc:	82 23       	and	r24, r18
     2ce:	8a bb       	out	0x1a, r24	; 26
			 udtReturnValue = E_OK;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     2d2:	08 95       	ret
			 
		case DIO_PORTB: CLR_BIT(DDRB,u8Pin);
     2d4:	27 b3       	in	r18, 0x17	; 23
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_udtSetPinDirection+0xae>
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_udtSetPinDirection+0xaa>
     2e4:	80 95       	com	r24
     2e6:	82 23       	and	r24, r18
     2e8:	87 bb       	out	0x17, r24	; 23
		     udtReturnValue = E_OK;
     2ea:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     2ec:	08 95       	ret
			 
		case DIO_PORTC: CLR_BIT(DDRC,u8Pin);
     2ee:	24 b3       	in	r18, 0x14	; 20
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_udtSetPinDirection+0xc8>
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_udtSetPinDirection+0xc4>
     2fe:	80 95       	com	r24
     300:	82 23       	and	r24, r18
     302:	84 bb       	out	0x14, r24	; 20
		     udtReturnValue = E_OK; 
     304:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     306:	08 95       	ret
			 
		case DIO_PORTD: CLR_BIT(DDRD,u8Pin);
     308:	21 b3       	in	r18, 0x11	; 17
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_udtSetPinDirection+0xe2>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	6a 95       	dec	r22
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_udtSetPinDirection+0xde>
     318:	80 95       	com	r24
     31a:	82 23       	and	r24, r18
     31c:	81 bb       	out	0x11, r24	; 17
		     udtReturnValue = E_OK; 
     31e:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     320:	08 95       	ret
	uint8 u8Port,
	uint8 u8Pin,
	uint8 u8Direction
)
{
	Std_ReturnType udtReturnValue = E_NOT_OK ; 
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	08 95       	ret
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	08 95       	ret
     32a:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*!Comment: Do nothing */
	}
		
	return udtReturnValue; 
}
     32c:	08 95       	ret

0000032e <DIO_udtSetPinValue>:
)
{
	
	Std_ReturnType udtReturnValue = E_NOT_OK ; 
	
	if(u8Value == DIO_HIGH)
     32e:	41 30       	cpi	r20, 0x01	; 1
     330:	c1 f5       	brne	.+112    	; 0x3a2 <DIO_udtSetPinValue+0x74>
	{
		switch (u8Port)
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	91 f0       	breq	.+36     	; 0x35a <DIO_udtSetPinValue+0x2c>
     336:	28 f0       	brcs	.+10     	; 0x342 <DIO_udtSetPinValue+0x14>
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	d9 f0       	breq	.+54     	; 0x372 <DIO_udtSetPinValue+0x44>
     33c:	83 30       	cpi	r24, 0x03	; 3
     33e:	29 f1       	breq	.+74     	; 0x38a <DIO_udtSetPinValue+0x5c>
     340:	6e c0       	rjmp	.+220    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
		case DIO_PORTA: SET_BIT(PORTA,u8Pin); 
     342:	2b b3       	in	r18, 0x1b	; 27
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_udtSetPinValue+0x20>
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_udtSetPinValue+0x1c>
     352:	82 2b       	or	r24, r18
     354:	8b bb       	out	0x1b, r24	; 27
			 udtReturnValue = E_OK; 
     356:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     358:	08 95       	ret
			 
		case DIO_PORTB: SET_BIT(PORTB,u8Pin);
     35a:	28 b3       	in	r18, 0x18	; 24
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_udtSetPinValue+0x38>
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_udtSetPinValue+0x34>
     36a:	82 2b       	or	r24, r18
     36c:	88 bb       	out	0x18, r24	; 24
		     udtReturnValue = E_OK; 
     36e:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     370:	08 95       	ret
			 
		case DIO_PORTC: SET_BIT(PORTC,u8Pin);
     372:	25 b3       	in	r18, 0x15	; 21
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_udtSetPinValue+0x50>
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	6a 95       	dec	r22
     380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_udtSetPinValue+0x4c>
     382:	82 2b       	or	r24, r18
     384:	85 bb       	out	0x15, r24	; 21
		     udtReturnValue = E_OK; 
     386:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     388:	08 95       	ret
			 
		case DIO_PORTD: SET_BIT(PORTD,u8Pin);
     38a:	22 b3       	in	r18, 0x12	; 18
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_udtSetPinValue+0x68>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	6a 95       	dec	r22
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_udtSetPinValue+0x64>
     39a:	82 2b       	or	r24, r18
     39c:	82 bb       	out	0x12, r24	; 18
		     udtReturnValue = E_OK; 
     39e:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     3a0:	08 95       	ret
			 /*!Comment: Do nothing */
			 break;
		}
		
	}
	else if (u8Value == DIO_LOW)
     3a2:	41 11       	cpse	r20, r1
     3a4:	3e c0       	rjmp	.+124    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
	switch (u8Port)
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	99 f0       	breq	.+38     	; 0x3d0 <DIO_udtSetPinValue+0xa2>
     3aa:	28 f0       	brcs	.+10     	; 0x3b6 <DIO_udtSetPinValue+0x88>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	e9 f0       	breq	.+58     	; 0x3ea <DIO_udtSetPinValue+0xbc>
     3b0:	83 30       	cpi	r24, 0x03	; 3
     3b2:	41 f1       	breq	.+80     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3b4:	38 c0       	rjmp	.+112    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
		case DIO_PORTA: CLR_BIT(PORTA,u8Pin); 
     3b6:	2b b3       	in	r18, 0x1b	; 27
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_udtSetPinValue+0x94>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	6a 95       	dec	r22
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_udtSetPinValue+0x90>
     3c6:	80 95       	com	r24
     3c8:	82 23       	and	r24, r18
     3ca:	8b bb       	out	0x1b, r24	; 27
			 udtReturnValue = E_OK; 
     3cc:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     3ce:	08 95       	ret
			 
		case DIO_PORTB: CLR_BIT(PORTB,u8Pin);
     3d0:	28 b3       	in	r18, 0x18	; 24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_udtSetPinValue+0xae>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	6a 95       	dec	r22
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_udtSetPinValue+0xaa>
     3e0:	80 95       	com	r24
     3e2:	82 23       	and	r24, r18
     3e4:	88 bb       	out	0x18, r24	; 24
		     udtReturnValue = E_OK; 
     3e6:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     3e8:	08 95       	ret
			 
		case DIO_PORTC: CLR_BIT(PORTC,u8Pin);
     3ea:	25 b3       	in	r18, 0x15	; 21
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_udtSetPinValue+0xc8>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	6a 95       	dec	r22
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_udtSetPinValue+0xc4>
     3fa:	80 95       	com	r24
     3fc:	82 23       	and	r24, r18
     3fe:	85 bb       	out	0x15, r24	; 21
		     udtReturnValue = E_OK; 
     400:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     402:	08 95       	ret
			 
		case DIO_PORTD: CLR_BIT(PORTD,u8Pin);
     404:	22 b3       	in	r18, 0x12	; 18
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	6a 95       	dec	r22
     412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     414:	80 95       	com	r24
     416:	82 23       	and	r24, r18
     418:	82 bb       	out	0x12, r24	; 18
		     udtReturnValue = E_OK; 
     41a:	80 e0       	ldi	r24, 0x00	; 0
		     break;
     41c:	08 95       	ret
	uint8 u8Pin,
	uint8 u8Value
)
{
	
	Std_ReturnType udtReturnValue = E_NOT_OK ; 
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	08 95       	ret
     426:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*!Comment: Do nothing */
	}
		
	return udtReturnValue; 
}
     428:	08 95       	ret

0000042a <LCD_udtSendCommand>:
	uint8 i=0;
	for( i=0 ; u8Print[i] != '\0' ; i++)
	{
		LCD_udtSendData(u8Print[i]);
	}
}
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	62 e0       	ldi	r22, 0x02	; 2
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     442:	8c 2f       	mov	r24, r28
     444:	80 7f       	andi	r24, 0xF0	; 240
     446:	8b bb       	out	0x1b, r24	; 27
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	63 e0       	ldi	r22, 0x03	; 3
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     452:	85 e3       	ldi	r24, 0x35	; 53
     454:	8a 95       	dec	r24
     456:	f1 f7       	brne	.-4      	; 0x454 <LCD_udtSendCommand+0x2a>
     458:	00 00       	nop
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	63 e0       	ldi	r22, 0x03	; 3
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     464:	8f e8       	ldi	r24, 0x8F	; 143
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <LCD_udtSendCommand+0x3e>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <LCD_udtSendCommand+0x44>
     46e:	00 00       	nop
     470:	c2 95       	swap	r28
     472:	c0 7f       	andi	r28, 0xF0	; 240
     474:	cb bb       	out	0x1b, r28	; 27
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	63 e0       	ldi	r22, 0x03	; 3
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     480:	95 e3       	ldi	r25, 0x35	; 53
     482:	9a 95       	dec	r25
     484:	f1 f7       	brne	.-4      	; 0x482 <LCD_udtSendCommand+0x58>
     486:	00 00       	nop
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	63 e0       	ldi	r22, 0x03	; 3
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     492:	8f e8       	ldi	r24, 0x8F	; 143
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <LCD_udtSendCommand+0x6c>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_udtSendCommand+0x72>
     49c:	00 00       	nop
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <LCD_udtSendData>:
     4a2:	cf 93       	push	r28
     4a4:	c8 2f       	mov	r28, r24
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	62 e0       	ldi	r22, 0x02	; 2
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     4ba:	8c 2f       	mov	r24, r28
     4bc:	80 7f       	andi	r24, 0xF0	; 240
     4be:	8b bb       	out	0x1b, r24	; 27
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     4ca:	85 e3       	ldi	r24, 0x35	; 53
     4cc:	8a 95       	dec	r24
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_udtSendData+0x2a>
     4d0:	00 00       	nop
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	63 e0       	ldi	r22, 0x03	; 3
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     4dc:	8f e8       	ldi	r24, 0x8F	; 143
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_udtSendData+0x3e>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_udtSendData+0x44>
     4e6:	00 00       	nop
     4e8:	c2 95       	swap	r28
     4ea:	c0 7f       	andi	r28, 0xF0	; 240
     4ec:	cb bb       	out	0x1b, r28	; 27
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	63 e0       	ldi	r22, 0x03	; 3
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     4f8:	95 e3       	ldi	r25, 0x35	; 53
     4fa:	9a 95       	dec	r25
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_udtSendData+0x58>
     4fe:	00 00       	nop
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	63 e0       	ldi	r22, 0x03	; 3
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
     50a:	8f e8       	ldi	r24, 0x8F	; 143
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <LCD_udtSendData+0x6c>
     512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_udtSendData+0x72>
     514:	00 00       	nop
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <LCD_vidInit>:
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	8a bb       	out	0x1a, r24	; 26
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	63 e0       	ldi	r22, 0x03	; 3
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
     53c:	2f ef       	ldi	r18, 0xFF	; 255
     53e:	83 ef       	ldi	r24, 0xF3	; 243
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	21 50       	subi	r18, 0x01	; 1
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <LCD_vidInit+0x28>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_vidInit+0x32>
     54c:	00 00       	nop
     54e:	83 e3       	ldi	r24, 0x33	; 51
     550:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     554:	82 e3       	ldi	r24, 0x32	; 50
     556:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     55a:	88 e2       	ldi	r24, 0x28	; 40
     55c:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     560:	8f e9       	ldi	r24, 0x9F	; 159
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <LCD_vidInit+0x4a>
     568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_vidInit+0x50>
     56a:	00 00       	nop
     56c:	8f e0       	ldi	r24, 0x0F	; 15
     56e:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     572:	8f e9       	ldi	r24, 0x9F	; 159
     574:	9f e0       	ldi	r25, 0x0F	; 15
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <LCD_vidInit+0x5c>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <LCD_vidInit+0x62>
     57c:	00 00       	nop
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     584:	8f e3       	ldi	r24, 0x3F	; 63
     586:	9f e1       	ldi	r25, 0x1F	; 31
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <LCD_vidInit+0x6e>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_vidInit+0x74>
     58e:	00 00       	nop
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     596:	08 95       	ret

00000598 <LCD_vidPrintWord>:

void LCD_vidPrintWord (uint8* pu8Word ) 
{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	8c 01       	movw	r16, r24
	
	uint8 u8Counter = 0; 
     5a0:	c0 e0       	ldi	r28, 0x00	; 0
	while (pu8Word[u8Counter] != '\0')
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <LCD_vidPrintWord+0x12>
	{
		LCD_udtSendData(pu8Word[u8Counter++]);
     5a4:	cf 5f       	subi	r28, 0xFF	; 255
     5a6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_udtSendData>

void LCD_vidPrintWord (uint8* pu8Word ) 
{
	
	uint8 u8Counter = 0; 
	while (pu8Word[u8Counter] != '\0')
     5aa:	f8 01       	movw	r30, r16
     5ac:	ec 0f       	add	r30, r28
     5ae:	f1 1d       	adc	r31, r1
     5b0:	80 81       	ld	r24, Z
     5b2:	81 11       	cpse	r24, r1
     5b4:	f7 cf       	rjmp	.-18     	; 0x5a4 <LCD_vidPrintWord+0xc>
	{
		LCD_udtSendData(pu8Word[u8Counter++]);
	}	
}
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	08 95       	ret

000005be <LCD_vidGoTo>:
(
	uint8 u8Row,
	uint8 u8Column
 )
{
	if ( u8Row == 0 )
     5be:	81 11       	cpse	r24, r1
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <LCD_vidGoTo+0xe>
	{
		LCD_udtSendCommand(u8Column + 128);
     5c2:	80 e8       	ldi	r24, 0x80	; 128
     5c4:	86 0f       	add	r24, r22
     5c6:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     5ca:	08 95       	ret
	}
	else
	{
		LCD_udtSendCommand((u8Column+0x40) + 128 );
     5cc:	80 ec       	ldi	r24, 0xC0	; 192
     5ce:	86 0f       	add	r24, r22
     5d0:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
     5d4:	08 95       	ret

000005d6 <__vector_9>:


int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
     5e4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__data_end>
     5e8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__data_end+0x1>
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
     5f2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
}
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <readultra>:
		DCMOTOR_vidStopMotor();
	}
	
}
void readultra (double *dis)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
	char string[10];
	long count;
	double distance;
	
	
	CLR_BIT(TCCR1B,4);
     60a:	8e b5       	in	r24, 0x2e	; 46
     60c:	8f 7e       	andi	r24, 0xEF	; 239
     60e:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,3);
     610:	8e b5       	in	r24, 0x2e	; 46
     612:	87 7f       	andi	r24, 0xF7	; 247
     614:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1A,1);
     616:	8f b5       	in	r24, 0x2f	; 47
     618:	8d 7f       	andi	r24, 0xFD	; 253
     61a:	8f bd       	out	0x2f, r24	; 47
	
	
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN1,DIO_HIGH);
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     626:	85 e3       	ldi	r24, 0x35	; 53
     628:	8a 95       	dec	r24
     62a:	f1 f7       	brne	.-4      	; 0x628 <readultra+0x24>
     62c:	00 00       	nop
	_delay_us(10);
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN1,DIO_LOW);
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	TCNT1 = 0;	
     638:	1d bc       	out	0x2d, r1	; 45
     63a:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x41;	
     63c:	81 e4       	ldi	r24, 0x41	; 65
     63e:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	
     640:	80 e2       	ldi	r24, 0x20	; 32
     642:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	88 bf       	out	0x38, r24	; 56

	
	
	while ((TIFR & (1 << ICF1)) == 0);
     648:	08 b6       	in	r0, 0x38	; 56
     64a:	05 fe       	sbrs	r0, 5
     64c:	fd cf       	rjmp	.-6      	; 0x648 <readultra+0x44>
	TCNT1 = 0;	
     64e:	1d bc       	out	0x2d, r1	; 45
     650:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01;	
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	88 bf       	out	0x38, r24	; 56
	TimerOverflow = 0;
     65e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__data_end+0x1>
     662:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__data_end>

	while ((TIFR & (1 << ICF1)) == 0);
     666:	08 b6       	in	r0, 0x38	; 56
     668:	05 fe       	sbrs	r0, 5
     66a:	fd cf       	rjmp	.-6      	; 0x666 <readultra+0x62>
	count = TCNT1 + (65535 * TimerOverflow);	
     66c:	6c b5       	in	r22, 0x2c	; 44
     66e:	7d b5       	in	r23, 0x2d	; 45
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
	
	distance = (double)count / 466.47;
     674:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
     678:	29 e2       	ldi	r18, 0x29	; 41
     67a:	3c e3       	ldi	r19, 0x3C	; 60
     67c:	49 ee       	ldi	r20, 0xE9	; 233
     67e:	53 e4       	ldi	r21, 0x43	; 67
     680:	0e 94 c8 06 	call	0xd90	; 0xd90 <__divsf3>
	distance = distance/2;
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	5f e3       	ldi	r21, 0x3F	; 63
     68c:	0e 94 27 08 	call	0x104e	; 0x104e <__mulsf3>
	
	*dis = distance ;
     690:	68 83       	st	Y, r22
     692:	79 83       	std	Y+1, r23	; 0x01
     694:	8a 83       	std	Y+2, r24	; 0x02
     696:	9b 83       	std	Y+3, r25	; 0x03
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <floatToString>:
void floatToString(float number, char* buffer, int bufferSize, int decimalPlaces) {
     69e:	4f 92       	push	r4
     6a0:	5f 92       	push	r5
     6a2:	6f 92       	push	r6
     6a4:	7f 92       	push	r7
     6a6:	8f 92       	push	r8
     6a8:	9f 92       	push	r9
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	4b 01       	movw	r8, r22
     6c0:	5c 01       	movw	r10, r24
     6c2:	6a 01       	movw	r12, r20
     6c4:	c2 2f       	mov	r28, r18
     6c6:	d3 2f       	mov	r29, r19
	int intPart = (int)number;
     6c8:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixsfsi>
     6cc:	2b 01       	movw	r4, r22
     6ce:	3c 01       	movw	r6, r24
	float decimalPart = number - intPart;
     6d0:	07 2e       	mov	r0, r23
     6d2:	00 0c       	add	r0, r0
     6d4:	88 0b       	sbc	r24, r24
     6d6:	99 0b       	sbc	r25, r25
     6d8:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	c5 01       	movw	r24, r10
     6e2:	b4 01       	movw	r22, r8
     6e4:	0e 94 56 06 	call	0xcac	; 0xcac <__subsf3>
     6e8:	4b 01       	movw	r8, r22
     6ea:	5c 01       	movw	r10, r24

	int intLength = snprintf(buffer, bufferSize, "%d", intPart);
     6ec:	5f 92       	push	r5
     6ee:	4f 92       	push	r4
     6f0:	80 e6       	ldi	r24, 0x60	; 96
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	df 92       	push	r13
     6fe:	cf 92       	push	r12
     700:	0e 94 ae 08 	call	0x115c	; 0x115c <snprintf>
     704:	ec 01       	movw	r28, r24
	int bufferIndex = intLength;

	if (decimalPlaces > 0) {
     706:	8d b7       	in	r24, 0x3d	; 61
     708:	9e b7       	in	r25, 0x3e	; 62
     70a:	08 96       	adiw	r24, 0x08	; 8
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	9e bf       	out	0x3e, r25	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	8d bf       	out	0x3d, r24	; 61
     716:	10 16       	cp	r1, r16
     718:	11 06       	cpc	r1, r17
     71a:	34 f4       	brge	.+12     	; 0x728 <floatToString+0x8a>
		buffer[bufferIndex] = '.';
     71c:	f6 01       	movw	r30, r12
     71e:	ec 0f       	add	r30, r28
     720:	fd 1f       	adc	r31, r29
     722:	8e e2       	ldi	r24, 0x2E	; 46
     724:	80 83       	st	Z, r24
		bufferIndex++;
     726:	21 96       	adiw	r28, 0x01	; 1
	distance = (double)count / 466.47;
	distance = distance/2;
	
	*dis = distance ;
}
void floatToString(float number, char* buffer, int bufferSize, int decimalPlaces) {
     728:	e1 2c       	mov	r14, r1
     72a:	f1 2c       	mov	r15, r1
     72c:	24 c0       	rjmp	.+72     	; 0x776 <floatToString+0xd8>
		buffer[bufferIndex] = '.';
		bufferIndex++;
	}

	for (int i = 0; i < decimalPlaces; i++) {
		decimalPart *= 10;
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e2       	ldi	r20, 0x20	; 32
     734:	51 e4       	ldi	r21, 0x41	; 65
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	0e 94 27 08 	call	0x104e	; 0x104e <__mulsf3>
     73e:	4b 01       	movw	r8, r22
     740:	5c 01       	movw	r10, r24
		int digit = (int)decimalPart;
     742:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixsfsi>
		buffer[bufferIndex] = '0' + digit;
     746:	f6 01       	movw	r30, r12
     748:	ec 0f       	add	r30, r28
     74a:	fd 1f       	adc	r31, r29
     74c:	20 e3       	ldi	r18, 0x30	; 48
     74e:	26 0f       	add	r18, r22
     750:	20 83       	st	Z, r18
		bufferIndex++;
     752:	21 96       	adiw	r28, 0x01	; 1
		decimalPart -= digit;
     754:	07 2e       	mov	r0, r23
     756:	00 0c       	add	r0, r0
     758:	88 0b       	sbc	r24, r24
     75a:	99 0b       	sbc	r25, r25
     75c:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c5 01       	movw	r24, r10
     766:	b4 01       	movw	r22, r8
     768:	0e 94 56 06 	call	0xcac	; 0xcac <__subsf3>
     76c:	4b 01       	movw	r8, r22
     76e:	5c 01       	movw	r10, r24
	if (decimalPlaces > 0) {
		buffer[bufferIndex] = '.';
		bufferIndex++;
	}

	for (int i = 0; i < decimalPlaces; i++) {
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	e9 1a       	sub	r14, r25
     774:	f9 0a       	sbc	r15, r25
     776:	e0 16       	cp	r14, r16
     778:	f1 06       	cpc	r15, r17
     77a:	cc f2       	brlt	.-78     	; 0x72e <floatToString+0x90>
		buffer[bufferIndex] = '0' + digit;
		bufferIndex++;
		decimalPart -= digit;
	}

	buffer[bufferIndex] = '\0';
     77c:	cc 0d       	add	r28, r12
     77e:	dd 1d       	adc	r29, r13
     780:	18 82       	st	Y, r1
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	7f 90       	pop	r7
     79c:	6f 90       	pop	r6
     79e:	5f 90       	pop	r5
     7a0:	4f 90       	pop	r4
     7a2:	08 95       	ret

000007a4 <changepath>:
	
	
}

void changepath(void)
{
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	6c 97       	sbiw	r28, 0x1c	; 28
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
	char string[20];
	double Rdis , Ldis ; 
	DCMOTOR_vidStopMotor();
     7c4:	0e 94 a6 00 	call	0x14c	; 0x14c <DCMOTOR_vidStopMotor>
	TIMER0_vidSyncSecondsDelay(1);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	LCD_udtSendCommand(0x01);
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
	TIMER0_vidSyncMilliSecondsDelay(20);
     7d6:	84 e1       	ldi	r24, 0x14	; 20
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
	LCD_vidPrintWord("Looking Right");
     7de:	83 e6       	ldi	r24, 0x63	; 99
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	SERVO_vidLookRight();
     7e6:	0e 94 cf 00 	call	0x19e	; 0x19e <SERVO_vidLookRight>
	TIMER0_vidSyncSecondsDelay(1);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	readultra(&Rdis);
     7f2:	ce 01       	movw	r24, r28
     7f4:	45 96       	adiw	r24, 0x15	; 21
     7f6:	0e 94 02 03 	call	0x604	; 0x604 <readultra>
	
	LCD_vidGoTo(2,0);
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_vidGoTo>
	floatToString(Rdis,string,sizeof(string),2);
     802:	6d 89       	ldd	r22, Y+21	; 0x15
     804:	7e 89       	ldd	r23, Y+22	; 0x16
     806:	8f 89       	ldd	r24, Y+23	; 0x17
     808:	98 8d       	ldd	r25, Y+24	; 0x18
     80a:	02 e0       	ldi	r16, 0x02	; 2
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	24 e1       	ldi	r18, 0x14	; 20
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	ae 01       	movw	r20, r28
     814:	4f 5f       	subi	r20, 0xFF	; 255
     816:	5f 4f       	sbci	r21, 0xFF	; 255
     818:	0e 94 4f 03 	call	0x69e	; 0x69e <floatToString>
	LCD_vidPrintWord(string);
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	LCD_vidPrintWord(" CM");
     824:	81 e7       	ldi	r24, 0x71	; 113
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	
	
	TIMER0_vidSyncSecondsDelay(1);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	LCD_udtSendCommand(0x01);
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
	TIMER0_vidSyncMilliSecondsDelay(20);
     83a:	84 e1       	ldi	r24, 0x14	; 20
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
	LCD_vidPrintWord("Looking Left");
     842:	85 e7       	ldi	r24, 0x75	; 117
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	SERVO_vidLookLeft();
     84a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SERVO_vidLookLeft>
	TIMER0_vidSyncSecondsDelay(1);
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	readultra(&Ldis);
     856:	ce 01       	movw	r24, r28
     858:	49 96       	adiw	r24, 0x19	; 25
     85a:	0e 94 02 03 	call	0x604	; 0x604 <readultra>
	
	LCD_vidGoTo(2,0);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_vidGoTo>
	floatToString(Ldis,string,sizeof(string),2);
     866:	69 8d       	ldd	r22, Y+25	; 0x19
     868:	7a 8d       	ldd	r23, Y+26	; 0x1a
     86a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     86c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     86e:	24 e1       	ldi	r18, 0x14	; 20
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	ae 01       	movw	r20, r28
     874:	4f 5f       	subi	r20, 0xFF	; 255
     876:	5f 4f       	sbci	r21, 0xFF	; 255
     878:	0e 94 4f 03 	call	0x69e	; 0x69e <floatToString>
	LCD_vidPrintWord(string);
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	LCD_vidPrintWord(" CM");
     884:	81 e7       	ldi	r24, 0x71	; 113
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	TIMER0_vidSyncSecondsDelay(1);
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	SERVO_vidLookForward();
     894:	0e 94 cb 00 	call	0x196	; 0x196 <SERVO_vidLookForward>
	TIMER0_vidSyncMilliSecondsDelay(500);
     898:	84 ef       	ldi	r24, 0xF4	; 244
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
	
	if((Rdis < 20) && (Ldis < 20) )
     8a0:	cd 88       	ldd	r12, Y+21	; 0x15
     8a2:	de 88       	ldd	r13, Y+22	; 0x16
     8a4:	ef 88       	ldd	r14, Y+23	; 0x17
     8a6:	f8 8c       	ldd	r15, Y+24	; 0x18
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 ea       	ldi	r20, 0xA0	; 160
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	c7 01       	movw	r24, r14
     8b2:	b6 01       	movw	r22, r12
     8b4:	0e 94 c3 06 	call	0xd86	; 0xd86 <__cmpsf2>
     8b8:	88 23       	and	r24, r24
     8ba:	e4 f4       	brge	.+56     	; 0x8f4 <__stack+0x95>
     8bc:	69 8d       	ldd	r22, Y+25	; 0x19
     8be:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 ea       	ldi	r20, 0xA0	; 160
     8ca:	51 e4       	ldi	r21, 0x41	; 65
     8cc:	0e 94 c3 06 	call	0xd86	; 0xd86 <__cmpsf2>
     8d0:	88 23       	and	r24, r24
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
	{
		LCD_udtSendCommand(0x01);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
		TIMER0_vidSyncMilliSecondsDelay(20);
     8da:	84 e1       	ldi	r24, 0x14	; 20
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
		LCD_vidPrintWord("ALL WAYS ARE BLOCKED");
     8e2:	82 e8       	ldi	r24, 0x82	; 130
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
		TIMER0_vidSyncSecondsDelay(4);
     8ea:	84 e0       	ldi	r24, 0x04	; 4
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
     8f2:	35 c0       	rjmp	.+106    	; 0x95e <__stack+0xff>
	}
	else if((int)Rdis > (int)Ldis)
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixsfsi>
     8fc:	8b 01       	movw	r16, r22
     8fe:	69 8d       	ldd	r22, Y+25	; 0x19
     900:	7a 8d       	ldd	r23, Y+26	; 0x1a
     902:	8b 8d       	ldd	r24, Y+27	; 0x1b
     904:	9c 8d       	ldd	r25, Y+28	; 0x1c
     906:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixsfsi>
     90a:	60 17       	cp	r22, r16
     90c:	71 07       	cpc	r23, r17
     90e:	74 f4       	brge	.+28     	; 0x92c <__stack+0xcd>
	{
		LCD_udtSendCommand(0x01);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
		TIMER0_vidSyncMilliSecondsDelay(20);
     916:	84 e1       	ldi	r24, 0x14	; 20
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
		LCD_vidPrintWord("TURNIG RIGHT");
     91e:	87 e9       	ldi	r24, 0x97	; 151
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
		DCMOTOR_vidTurnRight();
     926:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DCMOTOR_vidTurnRight>
     92a:	19 c0       	rjmp	.+50     	; 0x95e <__stack+0xff>
		
	}
	else if ((int)Ldis > (int) Rdis )
     92c:	06 17       	cp	r16, r22
     92e:	17 07       	cpc	r17, r23
     930:	74 f4       	brge	.+28     	; 0x94e <__stack+0xef>
	{
		LCD_udtSendCommand(0x01);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
		TIMER0_vidSyncMilliSecondsDelay(20);
     938:	84 e1       	ldi	r24, 0x14	; 20
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
		LCD_vidPrintWord("TURNIG LEFT");
     940:	84 ea       	ldi	r24, 0xA4	; 164
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
		DCMOTOR_vidTurnLeft();
     948:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DCMOTOR_vidTurnLeft>
     94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0xff>
		
	}
	else
	{
		DCMOTOR_vidMoveBackward();
     94e:	0e 94 87 00 	call	0x10e	; 0x10e <DCMOTOR_vidMoveBackward>
		TIMER0_vidSyncMilliSecondsDelay(1000);
     952:	88 ee       	ldi	r24, 0xE8	; 232
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
		DCMOTOR_vidStopMotor();
     95a:	0e 94 a6 00 	call	0x14c	; 0x14c <DCMOTOR_vidStopMotor>
	}
	
}
     95e:	6c 96       	adiw	r28, 0x1c	; 28
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	08 95       	ret

0000097c <main>:




int main(void)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	2e 97       	sbiw	r28, 0x0e	; 14
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
	TIMER0_vidInit();
     990:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER0_vidInit>
	LCD_vidInit();
     994:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_vidInit>
	SERVO_vidInit();
     998:	0e 94 c5 00 	call	0x18a	; 0x18a <SERVO_vidInit>
	DCMOTOR_vidInit();
     99c:	0e 94 49 00 	call	0x92	; 0x92 <DCMOTOR_vidInit>
	TIMER0_vidSyncSecondsDelay(3);
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	LCD_vidPrintWord("STARTING");
     9a8:	80 eb       	ldi	r24, 0xB0	; 176
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
	TIMER0_vidSyncSecondsDelay(2);
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	char string[10];
	long count;
	double distance = 1.1;
     9b8:	8d ec       	ldi	r24, 0xCD	; 205
     9ba:	9c ec       	ldi	r25, 0xCC	; 204
     9bc:	ac e8       	ldi	r26, 0x8C	; 140
     9be:	bf e3       	ldi	r27, 0x3F	; 63
     9c0:	8b 87       	std	Y+11, r24	; 0x0b
     9c2:	9c 87       	std	Y+12, r25	; 0x0c
     9c4:	ad 87       	std	Y+13, r26	; 0x0d
     9c6:	be 87       	std	Y+14, r27	; 0x0e
	
	DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN1,DIO_OUTPUT);		
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	66 e0       	ldi	r22, 0x06	; 6
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	sei();			
     9dc:	78 94       	sei
	TIMSK = (1 << TOIE1);	
     9de:	84 e0       	ldi	r24, 0x04	; 4
     9e0:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;
     9e2:	1f bc       	out	0x2f, r1	; 47
	DIO_udtSetPinDirection(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);		
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	0e 94 19 01 	call	0x232	; 0x232 <DIO_udtSetPinDirection>
	DIO_udtSetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
     9ee:	41 e0       	ldi	r20, 0x01	; 1
     9f0:	67 e0       	ldi	r22, 0x07	; 7
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_udtSetPinValue>
	
	SERVO_vidLookForward();
     9f8:	0e 94 cb 00 	call	0x196	; 0x196 <SERVO_vidLookForward>
	TIMER0_vidSyncSecondsDelay(1);
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
	
	
	while(1)
	{
				LCD_udtSendCommand(0x01);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
				TIMER0_vidSyncMilliSecondsDelay(20);
     a0a:	84 e1       	ldi	r24, 0x14	; 20
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
				LCD_vidPrintWord("LOOKING FORWARD");
     a12:	89 eb       	ldi	r24, 0xB9	; 185
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
				readultra(&distance);
     a1a:	ce 01       	movw	r24, r28
     a1c:	0b 96       	adiw	r24, 0x0b	; 11
     a1e:	0e 94 02 03 	call	0x604	; 0x604 <readultra>
				TIMER0_vidSyncMilliSecondsDelay(100);
     a22:	84 e6       	ldi	r24, 0x64	; 100
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
				LCD_vidGoTo(2,0);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_vidGoTo>
				floatToString(distance,string,sizeof(string),2);
     a32:	6b 85       	ldd	r22, Y+11	; 0x0b
     a34:	7c 85       	ldd	r23, Y+12	; 0x0c
     a36:	8d 85       	ldd	r24, Y+13	; 0x0d
     a38:	9e 85       	ldd	r25, Y+14	; 0x0e
     a3a:	02 e0       	ldi	r16, 0x02	; 2
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	2a e0       	ldi	r18, 0x0A	; 10
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	ae 01       	movw	r20, r28
     a44:	4f 5f       	subi	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	0e 94 4f 03 	call	0x69e	; 0x69e <floatToString>
				LCD_vidPrintWord(string);
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
				LCD_vidPrintWord(" CM");
     a54:	81 e7       	ldi	r24, 0x71	; 113
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
				
				
		if( (int)distance < 20)
     a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     a60:	8d 85       	ldd	r24, Y+13	; 0x0d
     a62:	9e 85       	ldd	r25, Y+14	; 0x0e
     a64:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixsfsi>
     a68:	64 31       	cpi	r22, 0x14	; 20
     a6a:	71 05       	cpc	r23, r1
     a6c:	1c f4       	brge	.+6      	; 0xa74 <main+0xf8>
				{
					changepath();
     a6e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <changepath>
     a72:	c8 cf       	rjmp	.-112    	; 0xa04 <main+0x88>
				}
				else
				{
					LCD_udtSendCommand(0x01);
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_udtSendCommand>
					TIMER0_vidSyncMilliSecondsDelay(20);
     a7a:	84 e1       	ldi	r24, 0x14	; 20
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER0_vidSyncMilliSecondsDelay>
					DCMOTOR_vidMoveForward();
     a82:	0e 94 68 00 	call	0xd0	; 0xd0 <DCMOTOR_vidMoveForward>
					LCD_vidPrintWord("MOVING FORWARD");
     a86:	89 ec       	ldi	r24, 0xC9	; 201
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
					LCD_vidGoTo(2,0);
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_vidGoTo>
					floatToString(distance,string,sizeof(string),2);
     a96:	6b 85       	ldd	r22, Y+11	; 0x0b
     a98:	7c 85       	ldd	r23, Y+12	; 0x0c
     a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9e:	02 e0       	ldi	r16, 0x02	; 2
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	2a e0       	ldi	r18, 0x0A	; 10
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	ae 01       	movw	r20, r28
     aa8:	4f 5f       	subi	r20, 0xFF	; 255
     aaa:	5f 4f       	sbci	r21, 0xFF	; 255
     aac:	0e 94 4f 03 	call	0x69e	; 0x69e <floatToString>
					LCD_vidPrintWord(string);
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
					LCD_vidPrintWord(" CM");
     ab8:	81 e7       	ldi	r24, 0x71	; 113
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_vidPrintWord>
					TIMER0_vidSyncSecondsDelay(1);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 81 05 	call	0xb02	; 0xb02 <TIMER0_vidSyncSecondsDelay>
     ac8:	9d cf       	rjmp	.-198    	; 0xa04 <main+0x88>

00000aca <SERVO_vidSetAngle>:
   At ~2.4ms    +90° (180°)    of its rotation.
*/
	
	uint16 u16OnTime;
	uint32 Linear ;
	Linear = u8Angle*10.4;
     aca:	68 2f       	mov	r22, r24
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
     ad6:	26 e6       	ldi	r18, 0x66	; 102
     ad8:	36 e6       	ldi	r19, 0x66	; 102
     ada:	46 e2       	ldi	r20, 0x26	; 38
     adc:	51 e4       	ldi	r21, 0x41	; 65
     ade:	0e 94 27 08 	call	0x104e	; 0x104e <__mulsf3>
     ae2:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixunssfsi>
	u16OnTime = 520 + Linear;
     ae6:	cb 01       	movw	r24, r22
     ae8:	88 5f       	subi	r24, 0xF8	; 248
     aea:	9d 4f       	sbci	r25, 0xFD	; 253
	
	
	TIMER1_vidFastPWM_ICR1Top(u16OnTime,20000);
     aec:	60 e2       	ldi	r22, 0x20	; 32
     aee:	7e e4       	ldi	r23, 0x4E	; 78
     af0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <TIMER1_vidFastPWM_ICR1Top>
     af4:	08 95       	ret

00000af6 <TIMER0_vidInit>:
uint32 u32NoFlags = 0 ;
	
void TIMER0_vidInit(void)
{
	#if   TIMER0_MODE_OF_OPERATION == TIMER0_NORMAL
		CLR_BIT(TCCR0, 6);
     af6:	83 b7       	in	r24, 0x33	; 51
	#if   TIMER0_PRESCALER_SELECTION == TIMER0_CLK_NO_PRESCALING
		CLR_BIT(TCCR0,2u);
		CLR_BIT(TCCR0,1u);
		SET_BIT(TCCR0,0u);
	#elif TIMER0_PRESCALER_SELECTION == TIMER0_CLK_DIV_8
		CLR_BIT(TCCR0,2u);
     af8:	83 7b       	andi	r24, 0xB3	; 179
		SET_BIT(TCCR0,1u);
     afa:	82 60       	ori	r24, 0x02	; 2
		CLR_BIT(TCCR0,0u);
     afc:	8e 7f       	andi	r24, 0xFE	; 254
     afe:	83 bf       	out	0x33, r24	; 51
     b00:	08 95       	ret

00000b02 <TIMER0_vidSyncSecondsDelay>:
	#endif
	
}

void TIMER0_vidSyncSecondsDelay     (uint16 u16Seconds)
{
     b02:	8f 92       	push	r8
     b04:	9f 92       	push	r9
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	5c 01       	movw	r10, r24
	float TimerFreq,TickTime,OVF,OVF2;
	u16Prescaler = TIMER0_PRESCALER_SELECTION;
	TimerFreq = (float)16/(float)u16Prescaler;
	TickTime = 1/TimerFreq;
	OVF = TickTime*256;
	u32NumberOfFlags = (u16Seconds*1000000)/OVF;
     b18:	dc 01       	movw	r26, r24
     b1a:	20 e4       	ldi	r18, 0x40	; 64
     b1c:	32 e4       	ldi	r19, 0x42	; 66
     b1e:	4f e0       	ldi	r20, 0x0F	; 15
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	0e 94 94 08 	call	0x1128	; 0x1128 <__muluhisi3>
     b26:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	5c e3       	ldi	r21, 0x3C	; 60
     b32:	0e 94 27 08 	call	0x104e	; 0x104e <__mulsf3>
     b36:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixunssfsi>
     b3a:	6b 01       	movw	r12, r22
     b3c:	7c 01       	movw	r14, r24
     b3e:	eb 01       	movw	r28, r22
	OVF2 = (int)(u16Seconds*1000000)%256;
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	92 e4       	ldi	r25, 0x42	; 66
     b44:	a8 9e       	mul	r10, r24
     b46:	b0 01       	movw	r22, r0
     b48:	a9 9e       	mul	r10, r25
     b4a:	70 0d       	add	r23, r0
     b4c:	b8 9e       	mul	r11, r24
     b4e:	70 0d       	add	r23, r0
     b50:	11 24       	eor	r1, r1
     b52:	70 78       	andi	r23, 0x80	; 128
     b54:	77 23       	and	r23, r23
     b56:	2c f4       	brge	.+10     	; 0xb62 <TIMER0_vidSyncSecondsDelay+0x60>
     b58:	61 50       	subi	r22, 0x01	; 1
     b5a:	71 09       	sbc	r23, r1
     b5c:	7f 6f       	ori	r23, 0xFF	; 255
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	07 2e       	mov	r0, r23
     b64:	00 0c       	add	r0, r0
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
	OVF2 = OVF2*(1/TickTime);
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	0e 94 57 06 	call	0xcae	; 0xcae <__addsf3>
     b76:	4b 01       	movw	r8, r22
     b78:	5c 01       	movw	r10, r24
	TCNT0 = OVF2;
     b7a:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixunssfsi>
     b7e:	62 bf       	out	0x32, r22	; 50
	if(OVF2 > 0 )
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	a9 01       	movw	r20, r18
     b86:	c5 01       	movw	r24, r10
     b88:	b4 01       	movw	r22, r8
     b8a:	0e 94 22 08 	call	0x1044	; 0x1044 <__gesf2>
     b8e:	18 16       	cp	r1, r24
     b90:	14 f4       	brge	.+4      	; 0xb96 <TIMER0_vidSyncSecondsDelay+0x94>
	{
		u32NumberOfFlags++;
     b92:	e6 01       	movw	r28, r12
     b94:	21 96       	adiw	r28, 0x01	; 1
	}
	
	for(localCounter=0 ; localCounter<u32NumberOfFlags ; localCounter++)
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <TIMER0_vidSyncSecondsDelay+0xa8>
	{
		/* !Comment: waiting for overflow*/
		while(GET_BIT(TIFR,0)==0);
     b9c:	88 b7       	in	r24, 0x38	; 56
     b9e:	80 ff       	sbrs	r24, 0
     ba0:	fd cf       	rjmp	.-6      	; 0xb9c <TIMER0_vidSyncSecondsDelay+0x9a>
		/* !Comment: clearing overflow flag*/
		SET_BIT(TIFR,0);
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	88 bf       	out	0x38, r24	; 56
	if(OVF2 > 0 )
	{
		u32NumberOfFlags++;
	}
	
	for(localCounter=0 ; localCounter<u32NumberOfFlags ; localCounter++)
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	2c 17       	cp	r18, r28
     bac:	3d 07       	cpc	r19, r29
     bae:	b0 f3       	brcs	.-20     	; 0xb9c <TIMER0_vidSyncSecondsDelay+0x9a>
		/* !Comment: waiting for overflow*/
		while(GET_BIT(TIFR,0)==0);
		/* !Comment: clearing overflow flag*/
		SET_BIT(TIFR,0);
	}
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	bf 90       	pop	r11
     bbe:	af 90       	pop	r10
     bc0:	9f 90       	pop	r9
     bc2:	8f 90       	pop	r8
     bc4:	08 95       	ret

00000bc6 <TIMER0_vidSyncMilliSecondsDelay>:

void TIMER0_vidSyncMilliSecondsDelay(uint16 u16MilliSeconds)
{
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	8c 01       	movw	r16, r24
	float TimerFreq,TickTime,OVF,OVF2;
	u16Prescaler = TIMER0_PRESCALER_SELECTION;
	TimerFreq = (float)16000/(float)u16Prescaler;
	TickTime = 1/TimerFreq;
	OVF = TickTime*256;
	u32NumberOfFlags = u16MilliSeconds/OVF;
     be0:	bc 01       	movw	r22, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 70 07 	call	0xee0	; 0xee0 <__floatunsisf>
     bea:	2f e6       	ldi	r18, 0x6F	; 111
     bec:	32 e1       	ldi	r19, 0x12	; 18
     bee:	43 e0       	ldi	r20, 0x03	; 3
     bf0:	5e e3       	ldi	r21, 0x3E	; 62
     bf2:	0e 94 c8 06 	call	0xd90	; 0xd90 <__divsf3>
     bf6:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixunssfsi>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	eb 01       	movw	r28, r22
	
	OVF2 = (int)u16MilliSeconds%256;
     c00:	b8 01       	movw	r22, r16
     c02:	70 78       	andi	r23, 0x80	; 128
     c04:	77 23       	and	r23, r23
     c06:	2c f4       	brge	.+10     	; 0xc12 <TIMER0_vidSyncMilliSecondsDelay+0x4c>
     c08:	61 50       	subi	r22, 0x01	; 1
     c0a:	71 09       	sbc	r23, r1
     c0c:	7f 6f       	ori	r23, 0xFF	; 255
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	07 2e       	mov	r0, r23
     c14:	00 0c       	add	r0, r0
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 72 07 	call	0xee4	; 0xee4 <__floatsisf>
	OVF2 = OVF2*(1/TickTime);
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	49 ef       	ldi	r20, 0xF9	; 249
     c24:	54 e4       	ldi	r21, 0x44	; 68
     c26:	0e 94 27 08 	call	0x104e	; 0x104e <__mulsf3>
     c2a:	4b 01       	movw	r8, r22
     c2c:	5c 01       	movw	r10, r24
	TCNT0 = OVF2;
     c2e:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixunssfsi>
     c32:	62 bf       	out	0x32, r22	; 50
	if(OVF2 > 0 )
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	a9 01       	movw	r20, r18
     c3a:	c5 01       	movw	r24, r10
     c3c:	b4 01       	movw	r22, r8
     c3e:	0e 94 22 08 	call	0x1044	; 0x1044 <__gesf2>
     c42:	18 16       	cp	r1, r24
     c44:	14 f4       	brge	.+4      	; 0xc4a <TIMER0_vidSyncMilliSecondsDelay+0x84>
	{
		u32NumberOfFlags++;
     c46:	e6 01       	movw	r28, r12
     c48:	21 96       	adiw	r28, 0x01	; 1
	}
	
	for(localCounter=0 ; localCounter<u32NumberOfFlags ; localCounter++)
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <TIMER0_vidSyncMilliSecondsDelay+0x98>
	{
		/* !Comment: waiting for overflow*/
		while(GET_BIT(TIFR,0)==0);
     c50:	88 b7       	in	r24, 0x38	; 56
     c52:	80 ff       	sbrs	r24, 0
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <TIMER0_vidSyncMilliSecondsDelay+0x8a>
		/* !Comment: clearing overflow flag*/
		SET_BIT(TIFR,0);
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	88 bf       	out	0x38, r24	; 56
	if(OVF2 > 0 )
	{
		u32NumberOfFlags++;
	}
	
	for(localCounter=0 ; localCounter<u32NumberOfFlags ; localCounter++)
     c5a:	2f 5f       	subi	r18, 0xFF	; 255
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	2c 17       	cp	r18, r28
     c60:	3d 07       	cpc	r19, r29
     c62:	b0 f3       	brcs	.-20     	; 0xc50 <TIMER0_vidSyncMilliSecondsDelay+0x8a>
		/* !Comment: waiting for overflow*/
		while(GET_BIT(TIFR,0)==0);
		/* !Comment: clearing overflow flag*/
		SET_BIT(TIFR,0);
	}
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	af 90       	pop	r10
     c78:	9f 90       	pop	r9
     c7a:	8f 90       	pop	r8
     c7c:	08 95       	ret

00000c7e <TIMER1_vidFastPWM_ICR1Top>:
uint16 u16OnTime,
uint16 u16Period
)
{
	/* !Comment: Clear OC1A on compare match, set OC1A at TOP */
	SET_BIT(TCCR1A,7);
     c7e:	2f b5       	in	r18, 0x2f	; 47
     c80:	20 68       	ori	r18, 0x80	; 128
	CLR_BIT(TCCR1A,6);
     c82:	2f 7b       	andi	r18, 0xBF	; 191
	
	/* !Comment: Waveform Generation Mode With ICR1 as TOP */
	SET_BIT(TCCR1B,4);
     c84:	3e b5       	in	r19, 0x2e	; 46
	SET_BIT(TCCR1B,3);
     c86:	38 61       	ori	r19, 0x18	; 24
	SET_BIT(TCCR1A,1);
     c88:	22 60       	ori	r18, 0x02	; 2
	CLR_BIT(TCCR1A,0);
     c8a:	2e 7f       	andi	r18, 0xFE	; 254
     c8c:	2f bd       	out	0x2f, r18	; 47
	
	/* !Comment: Prescaler select (64)*/
	CLR_BIT(TCCR1B,2);
     c8e:	23 2f       	mov	r18, r19
     c90:	2b 7f       	andi	r18, 0xFB	; 251
	SET_BIT(TCCR1B,1);
	SET_BIT(TCCR1B,0);
     c92:	23 60       	ori	r18, 0x03	; 3
     c94:	2e bd       	out	0x2e, r18	; 46
	OVF = TOP * TickTime = 2^16 * 4 usec = 262.144 msec
	TOP = OVF(period)/Ticktime
	CompMatch = OnTime/Ticktime;  
	*/
		
	ICR1  = 4999;
     c96:	27 e8       	ldi	r18, 0x87	; 135
     c98:	33 e1       	ldi	r19, 0x13	; 19
     c9a:	37 bd       	out	0x27, r19	; 39
     c9c:	26 bd       	out	0x26, r18	; 38
	OCR1A = u16OnTime/4;
     c9e:	96 95       	lsr	r25
     ca0:	87 95       	ror	r24
     ca2:	96 95       	lsr	r25
     ca4:	87 95       	ror	r24
     ca6:	9b bd       	out	0x2b, r25	; 43
     ca8:	8a bd       	out	0x2a, r24	; 42
     caa:	08 95       	ret

00000cac <__subsf3>:
     cac:	50 58       	subi	r21, 0x80	; 128

00000cae <__addsf3>:
     cae:	bb 27       	eor	r27, r27
     cb0:	aa 27       	eor	r26, r26
     cb2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__addsf3x>
     cb6:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     cba:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     cbe:	38 f0       	brcs	.+14     	; 0xcce <__addsf3+0x20>
     cc0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     cc4:	20 f0       	brcs	.+8      	; 0xcce <__addsf3+0x20>
     cc6:	39 f4       	brne	.+14     	; 0xcd6 <__addsf3+0x28>
     cc8:	9f 3f       	cpi	r25, 0xFF	; 255
     cca:	19 f4       	brne	.+6      	; 0xcd2 <__addsf3+0x24>
     ccc:	26 f4       	brtc	.+8      	; 0xcd6 <__addsf3+0x28>
     cce:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
     cd2:	0e f4       	brtc	.+2      	; 0xcd6 <__addsf3+0x28>
     cd4:	e0 95       	com	r30
     cd6:	e7 fb       	bst	r30, 7
     cd8:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>

00000cdc <__addsf3x>:
     cdc:	e9 2f       	mov	r30, r25
     cde:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     ce2:	58 f3       	brcs	.-42     	; 0xcba <__addsf3+0xc>
     ce4:	ba 17       	cp	r27, r26
     ce6:	62 07       	cpc	r22, r18
     ce8:	73 07       	cpc	r23, r19
     cea:	84 07       	cpc	r24, r20
     cec:	95 07       	cpc	r25, r21
     cee:	20 f0       	brcs	.+8      	; 0xcf8 <__addsf3x+0x1c>
     cf0:	79 f4       	brne	.+30     	; 0xd10 <__addsf3x+0x34>
     cf2:	a6 f5       	brtc	.+104    	; 0xd5c <__addsf3x+0x80>
     cf4:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     cf8:	0e f4       	brtc	.+2      	; 0xcfc <__addsf3x+0x20>
     cfa:	e0 95       	com	r30
     cfc:	0b 2e       	mov	r0, r27
     cfe:	ba 2f       	mov	r27, r26
     d00:	a0 2d       	mov	r26, r0
     d02:	0b 01       	movw	r0, r22
     d04:	b9 01       	movw	r22, r18
     d06:	90 01       	movw	r18, r0
     d08:	0c 01       	movw	r0, r24
     d0a:	ca 01       	movw	r24, r20
     d0c:	a0 01       	movw	r20, r0
     d0e:	11 24       	eor	r1, r1
     d10:	ff 27       	eor	r31, r31
     d12:	59 1b       	sub	r21, r25
     d14:	99 f0       	breq	.+38     	; 0xd3c <__addsf3x+0x60>
     d16:	59 3f       	cpi	r21, 0xF9	; 249
     d18:	50 f4       	brcc	.+20     	; 0xd2e <__addsf3x+0x52>
     d1a:	50 3e       	cpi	r21, 0xE0	; 224
     d1c:	68 f1       	brcs	.+90     	; 0xd78 <__addsf3x+0x9c>
     d1e:	1a 16       	cp	r1, r26
     d20:	f0 40       	sbci	r31, 0x00	; 0
     d22:	a2 2f       	mov	r26, r18
     d24:	23 2f       	mov	r18, r19
     d26:	34 2f       	mov	r19, r20
     d28:	44 27       	eor	r20, r20
     d2a:	58 5f       	subi	r21, 0xF8	; 248
     d2c:	f3 cf       	rjmp	.-26     	; 0xd14 <__addsf3x+0x38>
     d2e:	46 95       	lsr	r20
     d30:	37 95       	ror	r19
     d32:	27 95       	ror	r18
     d34:	a7 95       	ror	r26
     d36:	f0 40       	sbci	r31, 0x00	; 0
     d38:	53 95       	inc	r21
     d3a:	c9 f7       	brne	.-14     	; 0xd2e <__addsf3x+0x52>
     d3c:	7e f4       	brtc	.+30     	; 0xd5c <__addsf3x+0x80>
     d3e:	1f 16       	cp	r1, r31
     d40:	ba 0b       	sbc	r27, r26
     d42:	62 0b       	sbc	r22, r18
     d44:	73 0b       	sbc	r23, r19
     d46:	84 0b       	sbc	r24, r20
     d48:	ba f0       	brmi	.+46     	; 0xd78 <__addsf3x+0x9c>
     d4a:	91 50       	subi	r25, 0x01	; 1
     d4c:	a1 f0       	breq	.+40     	; 0xd76 <__addsf3x+0x9a>
     d4e:	ff 0f       	add	r31, r31
     d50:	bb 1f       	adc	r27, r27
     d52:	66 1f       	adc	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	88 1f       	adc	r24, r24
     d58:	c2 f7       	brpl	.-16     	; 0xd4a <__addsf3x+0x6e>
     d5a:	0e c0       	rjmp	.+28     	; 0xd78 <__addsf3x+0x9c>
     d5c:	ba 0f       	add	r27, r26
     d5e:	62 1f       	adc	r22, r18
     d60:	73 1f       	adc	r23, r19
     d62:	84 1f       	adc	r24, r20
     d64:	48 f4       	brcc	.+18     	; 0xd78 <__addsf3x+0x9c>
     d66:	87 95       	ror	r24
     d68:	77 95       	ror	r23
     d6a:	67 95       	ror	r22
     d6c:	b7 95       	ror	r27
     d6e:	f7 95       	ror	r31
     d70:	9e 3f       	cpi	r25, 0xFE	; 254
     d72:	08 f0       	brcs	.+2      	; 0xd76 <__addsf3x+0x9a>
     d74:	b0 cf       	rjmp	.-160    	; 0xcd6 <__addsf3+0x28>
     d76:	93 95       	inc	r25
     d78:	88 0f       	add	r24, r24
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <__addsf3x+0xa2>
     d7c:	99 27       	eor	r25, r25
     d7e:	ee 0f       	add	r30, r30
     d80:	97 95       	ror	r25
     d82:	87 95       	ror	r24
     d84:	08 95       	ret

00000d86 <__cmpsf2>:
     d86:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__fp_cmp>
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__cmpsf2+0x8>
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	08 95       	ret

00000d90 <__divsf3>:
     d90:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3x>
     d94:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     d98:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     d9c:	58 f0       	brcs	.+22     	; 0xdb4 <__divsf3+0x24>
     d9e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     da2:	40 f0       	brcs	.+16     	; 0xdb4 <__divsf3+0x24>
     da4:	29 f4       	brne	.+10     	; 0xdb0 <__divsf3+0x20>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	29 f0       	breq	.+10     	; 0xdb4 <__divsf3+0x24>
     daa:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
     dae:	51 11       	cpse	r21, r1
     db0:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     db4:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>

00000db8 <__divsf3x>:
     db8:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     dbc:	68 f3       	brcs	.-38     	; 0xd98 <__divsf3+0x8>

00000dbe <__divsf3_pse>:
     dbe:	99 23       	and	r25, r25
     dc0:	b1 f3       	breq	.-20     	; 0xdae <__divsf3+0x1e>
     dc2:	55 23       	and	r21, r21
     dc4:	91 f3       	breq	.-28     	; 0xdaa <__divsf3+0x1a>
     dc6:	95 1b       	sub	r25, r21
     dc8:	55 0b       	sbc	r21, r21
     dca:	bb 27       	eor	r27, r27
     dcc:	aa 27       	eor	r26, r26
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	38 f0       	brcs	.+14     	; 0xde4 <__divsf3_pse+0x26>
     dd6:	9f 5f       	subi	r25, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	aa 1f       	adc	r26, r26
     de2:	a9 f3       	breq	.-22     	; 0xdce <__divsf3_pse+0x10>
     de4:	35 d0       	rcall	.+106    	; 0xe50 <__divsf3_pse+0x92>
     de6:	0e 2e       	mov	r0, r30
     de8:	3a f0       	brmi	.+14     	; 0xdf8 <__divsf3_pse+0x3a>
     dea:	e0 e8       	ldi	r30, 0x80	; 128
     dec:	32 d0       	rcall	.+100    	; 0xe52 <__divsf3_pse+0x94>
     dee:	91 50       	subi	r25, 0x01	; 1
     df0:	50 40       	sbci	r21, 0x00	; 0
     df2:	e6 95       	lsr	r30
     df4:	00 1c       	adc	r0, r0
     df6:	ca f7       	brpl	.-14     	; 0xdea <__divsf3_pse+0x2c>
     df8:	2b d0       	rcall	.+86     	; 0xe50 <__divsf3_pse+0x92>
     dfa:	fe 2f       	mov	r31, r30
     dfc:	29 d0       	rcall	.+82     	; 0xe50 <__divsf3_pse+0x92>
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	bb 1f       	adc	r27, r27
     e06:	26 17       	cp	r18, r22
     e08:	37 07       	cpc	r19, r23
     e0a:	48 07       	cpc	r20, r24
     e0c:	ab 07       	cpc	r26, r27
     e0e:	b0 e8       	ldi	r27, 0x80	; 128
     e10:	09 f0       	breq	.+2      	; 0xe14 <__divsf3_pse+0x56>
     e12:	bb 0b       	sbc	r27, r27
     e14:	80 2d       	mov	r24, r0
     e16:	bf 01       	movw	r22, r30
     e18:	ff 27       	eor	r31, r31
     e1a:	93 58       	subi	r25, 0x83	; 131
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	3a f0       	brmi	.+14     	; 0xe2e <__divsf3_pse+0x70>
     e20:	9e 3f       	cpi	r25, 0xFE	; 254
     e22:	51 05       	cpc	r21, r1
     e24:	78 f0       	brcs	.+30     	; 0xe44 <__divsf3_pse+0x86>
     e26:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
     e2a:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e2e:	5f 3f       	cpi	r21, 0xFF	; 255
     e30:	e4 f3       	brlt	.-8      	; 0xe2a <__divsf3_pse+0x6c>
     e32:	98 3e       	cpi	r25, 0xE8	; 232
     e34:	d4 f3       	brlt	.-12     	; 0xe2a <__divsf3_pse+0x6c>
     e36:	86 95       	lsr	r24
     e38:	77 95       	ror	r23
     e3a:	67 95       	ror	r22
     e3c:	b7 95       	ror	r27
     e3e:	f7 95       	ror	r31
     e40:	9f 5f       	subi	r25, 0xFF	; 255
     e42:	c9 f7       	brne	.-14     	; 0xe36 <__divsf3_pse+0x78>
     e44:	88 0f       	add	r24, r24
     e46:	91 1d       	adc	r25, r1
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	97 f9       	bld	r25, 7
     e4e:	08 95       	ret
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	66 0f       	add	r22, r22
     e54:	77 1f       	adc	r23, r23
     e56:	88 1f       	adc	r24, r24
     e58:	bb 1f       	adc	r27, r27
     e5a:	62 17       	cp	r22, r18
     e5c:	73 07       	cpc	r23, r19
     e5e:	84 07       	cpc	r24, r20
     e60:	ba 07       	cpc	r27, r26
     e62:	20 f0       	brcs	.+8      	; 0xe6c <__divsf3_pse+0xae>
     e64:	62 1b       	sub	r22, r18
     e66:	73 0b       	sbc	r23, r19
     e68:	84 0b       	sbc	r24, r20
     e6a:	ba 0b       	sbc	r27, r26
     e6c:	ee 1f       	adc	r30, r30
     e6e:	88 f7       	brcc	.-30     	; 0xe52 <__divsf3_pse+0x94>
     e70:	e0 95       	com	r30
     e72:	08 95       	ret

00000e74 <__fixsfsi>:
     e74:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixunssfsi>
     e78:	68 94       	set
     e7a:	b1 11       	cpse	r27, r1
     e7c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e80:	08 95       	ret

00000e82 <__fixunssfsi>:
     e82:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     e86:	88 f0       	brcs	.+34     	; 0xeaa <__fixunssfsi+0x28>
     e88:	9f 57       	subi	r25, 0x7F	; 127
     e8a:	98 f0       	brcs	.+38     	; 0xeb2 <__fixunssfsi+0x30>
     e8c:	b9 2f       	mov	r27, r25
     e8e:	99 27       	eor	r25, r25
     e90:	b7 51       	subi	r27, 0x17	; 23
     e92:	b0 f0       	brcs	.+44     	; 0xec0 <__fixunssfsi+0x3e>
     e94:	e1 f0       	breq	.+56     	; 0xece <__fixunssfsi+0x4c>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	1a f0       	brmi	.+6      	; 0xea6 <__fixunssfsi+0x24>
     ea0:	ba 95       	dec	r27
     ea2:	c9 f7       	brne	.-14     	; 0xe96 <__fixunssfsi+0x14>
     ea4:	14 c0       	rjmp	.+40     	; 0xece <__fixunssfsi+0x4c>
     ea6:	b1 30       	cpi	r27, 0x01	; 1
     ea8:	91 f0       	breq	.+36     	; 0xece <__fixunssfsi+0x4c>
     eaa:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_zero>
     eae:	b1 e0       	ldi	r27, 0x01	; 1
     eb0:	08 95       	ret
     eb2:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     eb6:	67 2f       	mov	r22, r23
     eb8:	78 2f       	mov	r23, r24
     eba:	88 27       	eor	r24, r24
     ebc:	b8 5f       	subi	r27, 0xF8	; 248
     ebe:	39 f0       	breq	.+14     	; 0xece <__fixunssfsi+0x4c>
     ec0:	b9 3f       	cpi	r27, 0xF9	; 249
     ec2:	cc f3       	brlt	.-14     	; 0xeb6 <__fixunssfsi+0x34>
     ec4:	86 95       	lsr	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b3 95       	inc	r27
     ecc:	d9 f7       	brne	.-10     	; 0xec4 <__fixunssfsi+0x42>
     ece:	3e f4       	brtc	.+14     	; 0xede <__fixunssfsi+0x5c>
     ed0:	90 95       	com	r25
     ed2:	80 95       	com	r24
     ed4:	70 95       	com	r23
     ed6:	61 95       	neg	r22
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	08 95       	ret

00000ee0 <__floatunsisf>:
     ee0:	e8 94       	clt
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <__floatsisf+0x12>

00000ee4 <__floatsisf>:
     ee4:	97 fb       	bst	r25, 7
     ee6:	3e f4       	brtc	.+14     	; 0xef6 <__floatsisf+0x12>
     ee8:	90 95       	com	r25
     eea:	80 95       	com	r24
     eec:	70 95       	com	r23
     eee:	61 95       	neg	r22
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	8f 4f       	sbci	r24, 0xFF	; 255
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	99 23       	and	r25, r25
     ef8:	a9 f0       	breq	.+42     	; 0xf24 <__floatsisf+0x40>
     efa:	f9 2f       	mov	r31, r25
     efc:	96 e9       	ldi	r25, 0x96	; 150
     efe:	bb 27       	eor	r27, r27
     f00:	93 95       	inc	r25
     f02:	f6 95       	lsr	r31
     f04:	87 95       	ror	r24
     f06:	77 95       	ror	r23
     f08:	67 95       	ror	r22
     f0a:	b7 95       	ror	r27
     f0c:	f1 11       	cpse	r31, r1
     f0e:	f8 cf       	rjmp	.-16     	; 0xf00 <__floatsisf+0x1c>
     f10:	fa f4       	brpl	.+62     	; 0xf50 <__floatsisf+0x6c>
     f12:	bb 0f       	add	r27, r27
     f14:	11 f4       	brne	.+4      	; 0xf1a <__floatsisf+0x36>
     f16:	60 ff       	sbrs	r22, 0
     f18:	1b c0       	rjmp	.+54     	; 0xf50 <__floatsisf+0x6c>
     f1a:	6f 5f       	subi	r22, 0xFF	; 255
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <__floatsisf+0x6c>
     f24:	88 23       	and	r24, r24
     f26:	11 f0       	breq	.+4      	; 0xf2c <__floatsisf+0x48>
     f28:	96 e9       	ldi	r25, 0x96	; 150
     f2a:	11 c0       	rjmp	.+34     	; 0xf4e <__floatsisf+0x6a>
     f2c:	77 23       	and	r23, r23
     f2e:	21 f0       	breq	.+8      	; 0xf38 <__floatsisf+0x54>
     f30:	9e e8       	ldi	r25, 0x8E	; 142
     f32:	87 2f       	mov	r24, r23
     f34:	76 2f       	mov	r23, r22
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <__floatsisf+0x5e>
     f38:	66 23       	and	r22, r22
     f3a:	71 f0       	breq	.+28     	; 0xf58 <__floatsisf+0x74>
     f3c:	96 e8       	ldi	r25, 0x86	; 134
     f3e:	86 2f       	mov	r24, r22
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	2a f0       	brmi	.+10     	; 0xf50 <__floatsisf+0x6c>
     f46:	9a 95       	dec	r25
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	da f7       	brpl	.-10     	; 0xf46 <__floatsisf+0x62>
     f50:	88 0f       	add	r24, r24
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret

00000f5a <__fp_cmp>:
     f5a:	99 0f       	add	r25, r25
     f5c:	00 08       	sbc	r0, r0
     f5e:	55 0f       	add	r21, r21
     f60:	aa 0b       	sbc	r26, r26
     f62:	e0 e8       	ldi	r30, 0x80	; 128
     f64:	fe ef       	ldi	r31, 0xFE	; 254
     f66:	16 16       	cp	r1, r22
     f68:	17 06       	cpc	r1, r23
     f6a:	e8 07       	cpc	r30, r24
     f6c:	f9 07       	cpc	r31, r25
     f6e:	c0 f0       	brcs	.+48     	; 0xfa0 <__fp_cmp+0x46>
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	e4 07       	cpc	r30, r20
     f76:	f5 07       	cpc	r31, r21
     f78:	98 f0       	brcs	.+38     	; 0xfa0 <__fp_cmp+0x46>
     f7a:	62 1b       	sub	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	95 0b       	sbc	r25, r21
     f82:	39 f4       	brne	.+14     	; 0xf92 <__fp_cmp+0x38>
     f84:	0a 26       	eor	r0, r26
     f86:	61 f0       	breq	.+24     	; 0xfa0 <__fp_cmp+0x46>
     f88:	23 2b       	or	r18, r19
     f8a:	24 2b       	or	r18, r20
     f8c:	25 2b       	or	r18, r21
     f8e:	21 f4       	brne	.+8      	; 0xf98 <__fp_cmp+0x3e>
     f90:	08 95       	ret
     f92:	0a 26       	eor	r0, r26
     f94:	09 f4       	brne	.+2      	; 0xf98 <__fp_cmp+0x3e>
     f96:	a1 40       	sbci	r26, 0x01	; 1
     f98:	a6 95       	lsr	r26
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	81 1d       	adc	r24, r1
     f9e:	81 1d       	adc	r24, r1
     fa0:	08 95       	ret

00000fa2 <__fp_inf>:
     fa2:	97 f9       	bld	r25, 7
     fa4:	9f 67       	ori	r25, 0x7F	; 127
     fa6:	80 e8       	ldi	r24, 0x80	; 128
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	08 95       	ret

00000fae <__fp_nan>:
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	80 ec       	ldi	r24, 0xC0	; 192
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <__gesf2>:
    1044:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__fp_cmp>
    1048:	08 f4       	brcc	.+2      	; 0x104c <__gesf2+0x8>
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	08 95       	ret

0000104e <__mulsf3>:
    104e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__mulsf3x>
    1052:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    1056:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    105a:	38 f0       	brcs	.+14     	; 0x106a <__mulsf3+0x1c>
    105c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1060:	20 f0       	brcs	.+8      	; 0x106a <__mulsf3+0x1c>
    1062:	95 23       	and	r25, r21
    1064:	11 f0       	breq	.+4      	; 0x106a <__mulsf3+0x1c>
    1066:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
    106a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    106e:	11 24       	eor	r1, r1
    1070:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

00001074 <__mulsf3x>:
    1074:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    1078:	70 f3       	brcs	.-36     	; 0x1056 <__mulsf3+0x8>

0000107a <__mulsf3_pse>:
    107a:	95 9f       	mul	r25, r21
    107c:	c1 f3       	breq	.-16     	; 0x106e <__mulsf3+0x20>
    107e:	95 0f       	add	r25, r21
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	55 1f       	adc	r21, r21
    1084:	62 9f       	mul	r22, r18
    1086:	f0 01       	movw	r30, r0
    1088:	72 9f       	mul	r23, r18
    108a:	bb 27       	eor	r27, r27
    108c:	f0 0d       	add	r31, r0
    108e:	b1 1d       	adc	r27, r1
    1090:	63 9f       	mul	r22, r19
    1092:	aa 27       	eor	r26, r26
    1094:	f0 0d       	add	r31, r0
    1096:	b1 1d       	adc	r27, r1
    1098:	aa 1f       	adc	r26, r26
    109a:	64 9f       	mul	r22, r20
    109c:	66 27       	eor	r22, r22
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	66 1f       	adc	r22, r22
    10a4:	82 9f       	mul	r24, r18
    10a6:	22 27       	eor	r18, r18
    10a8:	b0 0d       	add	r27, r0
    10aa:	a1 1d       	adc	r26, r1
    10ac:	62 1f       	adc	r22, r18
    10ae:	73 9f       	mul	r23, r19
    10b0:	b0 0d       	add	r27, r0
    10b2:	a1 1d       	adc	r26, r1
    10b4:	62 1f       	adc	r22, r18
    10b6:	83 9f       	mul	r24, r19
    10b8:	a0 0d       	add	r26, r0
    10ba:	61 1d       	adc	r22, r1
    10bc:	22 1f       	adc	r18, r18
    10be:	74 9f       	mul	r23, r20
    10c0:	33 27       	eor	r19, r19
    10c2:	a0 0d       	add	r26, r0
    10c4:	61 1d       	adc	r22, r1
    10c6:	23 1f       	adc	r18, r19
    10c8:	84 9f       	mul	r24, r20
    10ca:	60 0d       	add	r22, r0
    10cc:	21 1d       	adc	r18, r1
    10ce:	82 2f       	mov	r24, r18
    10d0:	76 2f       	mov	r23, r22
    10d2:	6a 2f       	mov	r22, r26
    10d4:	11 24       	eor	r1, r1
    10d6:	9f 57       	subi	r25, 0x7F	; 127
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	9a f0       	brmi	.+38     	; 0x1102 <__mulsf3_pse+0x88>
    10dc:	f1 f0       	breq	.+60     	; 0x111a <__mulsf3_pse+0xa0>
    10de:	88 23       	and	r24, r24
    10e0:	4a f0       	brmi	.+18     	; 0x10f4 <__mulsf3_pse+0x7a>
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	bb 1f       	adc	r27, r27
    10e8:	66 1f       	adc	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	91 50       	subi	r25, 0x01	; 1
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	a9 f7       	brne	.-22     	; 0x10de <__mulsf3_pse+0x64>
    10f4:	9e 3f       	cpi	r25, 0xFE	; 254
    10f6:	51 05       	cpc	r21, r1
    10f8:	80 f0       	brcs	.+32     	; 0x111a <__mulsf3_pse+0xa0>
    10fa:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__fp_inf>
    10fe:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	e4 f3       	brlt	.-8      	; 0x10fe <__mulsf3_pse+0x84>
    1106:	98 3e       	cpi	r25, 0xE8	; 232
    1108:	d4 f3       	brlt	.-12     	; 0x10fe <__mulsf3_pse+0x84>
    110a:	86 95       	lsr	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b7 95       	ror	r27
    1112:	f7 95       	ror	r31
    1114:	e7 95       	ror	r30
    1116:	9f 5f       	subi	r25, 0xFF	; 255
    1118:	c1 f7       	brne	.-16     	; 0x110a <__mulsf3_pse+0x90>
    111a:	fe 2b       	or	r31, r30
    111c:	88 0f       	add	r24, r24
    111e:	91 1d       	adc	r25, r1
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	97 f9       	bld	r25, 7
    1126:	08 95       	ret

00001128 <__muluhisi3>:
    1128:	0e 94 9f 08 	call	0x113e	; 0x113e <__umulhisi3>
    112c:	a5 9f       	mul	r26, r21
    112e:	90 0d       	add	r25, r0
    1130:	b4 9f       	mul	r27, r20
    1132:	90 0d       	add	r25, r0
    1134:	a4 9f       	mul	r26, r20
    1136:	80 0d       	add	r24, r0
    1138:	91 1d       	adc	r25, r1
    113a:	11 24       	eor	r1, r1
    113c:	08 95       	ret

0000113e <__umulhisi3>:
    113e:	a2 9f       	mul	r26, r18
    1140:	b0 01       	movw	r22, r0
    1142:	b3 9f       	mul	r27, r19
    1144:	c0 01       	movw	r24, r0
    1146:	a3 9f       	mul	r26, r19
    1148:	70 0d       	add	r23, r0
    114a:	81 1d       	adc	r24, r1
    114c:	11 24       	eor	r1, r1
    114e:	91 1d       	adc	r25, r1
    1150:	b2 9f       	mul	r27, r18
    1152:	70 0d       	add	r23, r0
    1154:	81 1d       	adc	r24, r1
    1156:	11 24       	eor	r1, r1
    1158:	91 1d       	adc	r25, r1
    115a:	08 95       	ret

0000115c <snprintf>:
    115c:	ae e0       	ldi	r26, 0x0E	; 14
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 eb       	ldi	r30, 0xB4	; 180
    1162:	f8 e0       	ldi	r31, 0x08	; 8
    1164:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__prologue_saves__+0x1c>
    1168:	0d 89       	ldd	r16, Y+21	; 0x15
    116a:	1e 89       	ldd	r17, Y+22	; 0x16
    116c:	8f 89       	ldd	r24, Y+23	; 0x17
    116e:	98 8d       	ldd	r25, Y+24	; 0x18
    1170:	26 e0       	ldi	r18, 0x06	; 6
    1172:	2c 83       	std	Y+4, r18	; 0x04
    1174:	1a 83       	std	Y+2, r17	; 0x02
    1176:	09 83       	std	Y+1, r16	; 0x01
    1178:	97 ff       	sbrs	r25, 7
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <snprintf+0x24>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e8       	ldi	r25, 0x80	; 128
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	ae 01       	movw	r20, r28
    1188:	45 5e       	subi	r20, 0xE5	; 229
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	69 8d       	ldd	r22, Y+25	; 0x19
    118e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 de 08 	call	0x11bc	; 0x11bc <vfprintf>
    1198:	4d 81       	ldd	r20, Y+5	; 0x05
    119a:	5e 81       	ldd	r21, Y+6	; 0x06
    119c:	57 fd       	sbrc	r21, 7
    119e:	0a c0       	rjmp	.+20     	; 0x11b4 <snprintf+0x58>
    11a0:	2f 81       	ldd	r18, Y+7	; 0x07
    11a2:	38 85       	ldd	r19, Y+8	; 0x08
    11a4:	42 17       	cp	r20, r18
    11a6:	53 07       	cpc	r21, r19
    11a8:	0c f4       	brge	.+2      	; 0x11ac <snprintf+0x50>
    11aa:	9a 01       	movw	r18, r20
    11ac:	f8 01       	movw	r30, r16
    11ae:	e2 0f       	add	r30, r18
    11b0:	f3 1f       	adc	r31, r19
    11b2:	10 82       	st	Z, r1
    11b4:	2e 96       	adiw	r28, 0x0e	; 14
    11b6:	e4 e0       	ldi	r30, 0x04	; 4
    11b8:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__epilogue_restores__+0x1c>

000011bc <vfprintf>:
    11bc:	ab e0       	ldi	r26, 0x0B	; 11
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e4 ee       	ldi	r30, 0xE4	; 228
    11c2:	f8 e0       	ldi	r31, 0x08	; 8
    11c4:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__prologue_saves__>
    11c8:	6c 01       	movw	r12, r24
    11ca:	7b 01       	movw	r14, r22
    11cc:	8a 01       	movw	r16, r20
    11ce:	fc 01       	movw	r30, r24
    11d0:	17 82       	std	Z+7, r1	; 0x07
    11d2:	16 82       	std	Z+6, r1	; 0x06
    11d4:	83 81       	ldd	r24, Z+3	; 0x03
    11d6:	81 ff       	sbrs	r24, 1
    11d8:	cc c1       	rjmp	.+920    	; 0x1572 <vfprintf+0x3b6>
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	3c 01       	movw	r6, r24
    11e0:	f6 01       	movw	r30, r12
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	f7 01       	movw	r30, r14
    11e6:	93 fd       	sbrc	r25, 3
    11e8:	85 91       	lpm	r24, Z+
    11ea:	93 ff       	sbrs	r25, 3
    11ec:	81 91       	ld	r24, Z+
    11ee:	7f 01       	movw	r14, r30
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <vfprintf+0x3a>
    11f4:	ba c1       	rjmp	.+884    	; 0x156a <vfprintf+0x3ae>
    11f6:	85 32       	cpi	r24, 0x25	; 37
    11f8:	39 f4       	brne	.+14     	; 0x1208 <vfprintf+0x4c>
    11fa:	93 fd       	sbrc	r25, 3
    11fc:	85 91       	lpm	r24, Z+
    11fe:	93 ff       	sbrs	r25, 3
    1200:	81 91       	ld	r24, Z+
    1202:	7f 01       	movw	r14, r30
    1204:	85 32       	cpi	r24, 0x25	; 37
    1206:	29 f4       	brne	.+10     	; 0x1212 <vfprintf+0x56>
    1208:	b6 01       	movw	r22, r12
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    1210:	e7 cf       	rjmp	.-50     	; 0x11e0 <vfprintf+0x24>
    1212:	91 2c       	mov	r9, r1
    1214:	21 2c       	mov	r2, r1
    1216:	31 2c       	mov	r3, r1
    1218:	ff e1       	ldi	r31, 0x1F	; 31
    121a:	f3 15       	cp	r31, r3
    121c:	d8 f0       	brcs	.+54     	; 0x1254 <vfprintf+0x98>
    121e:	8b 32       	cpi	r24, 0x2B	; 43
    1220:	79 f0       	breq	.+30     	; 0x1240 <vfprintf+0x84>
    1222:	38 f4       	brcc	.+14     	; 0x1232 <vfprintf+0x76>
    1224:	80 32       	cpi	r24, 0x20	; 32
    1226:	79 f0       	breq	.+30     	; 0x1246 <vfprintf+0x8a>
    1228:	83 32       	cpi	r24, 0x23	; 35
    122a:	a1 f4       	brne	.+40     	; 0x1254 <vfprintf+0x98>
    122c:	23 2d       	mov	r18, r3
    122e:	20 61       	ori	r18, 0x10	; 16
    1230:	1d c0       	rjmp	.+58     	; 0x126c <vfprintf+0xb0>
    1232:	8d 32       	cpi	r24, 0x2D	; 45
    1234:	61 f0       	breq	.+24     	; 0x124e <vfprintf+0x92>
    1236:	80 33       	cpi	r24, 0x30	; 48
    1238:	69 f4       	brne	.+26     	; 0x1254 <vfprintf+0x98>
    123a:	23 2d       	mov	r18, r3
    123c:	21 60       	ori	r18, 0x01	; 1
    123e:	16 c0       	rjmp	.+44     	; 0x126c <vfprintf+0xb0>
    1240:	83 2d       	mov	r24, r3
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	38 2e       	mov	r3, r24
    1246:	e3 2d       	mov	r30, r3
    1248:	e4 60       	ori	r30, 0x04	; 4
    124a:	3e 2e       	mov	r3, r30
    124c:	2a c0       	rjmp	.+84     	; 0x12a2 <vfprintf+0xe6>
    124e:	f3 2d       	mov	r31, r3
    1250:	f8 60       	ori	r31, 0x08	; 8
    1252:	1d c0       	rjmp	.+58     	; 0x128e <vfprintf+0xd2>
    1254:	37 fc       	sbrc	r3, 7
    1256:	2d c0       	rjmp	.+90     	; 0x12b2 <vfprintf+0xf6>
    1258:	20 ed       	ldi	r18, 0xD0	; 208
    125a:	28 0f       	add	r18, r24
    125c:	2a 30       	cpi	r18, 0x0A	; 10
    125e:	40 f0       	brcs	.+16     	; 0x1270 <vfprintf+0xb4>
    1260:	8e 32       	cpi	r24, 0x2E	; 46
    1262:	b9 f4       	brne	.+46     	; 0x1292 <vfprintf+0xd6>
    1264:	36 fc       	sbrc	r3, 6
    1266:	81 c1       	rjmp	.+770    	; 0x156a <vfprintf+0x3ae>
    1268:	23 2d       	mov	r18, r3
    126a:	20 64       	ori	r18, 0x40	; 64
    126c:	32 2e       	mov	r3, r18
    126e:	19 c0       	rjmp	.+50     	; 0x12a2 <vfprintf+0xe6>
    1270:	36 fe       	sbrs	r3, 6
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <vfprintf+0xc4>
    1274:	8a e0       	ldi	r24, 0x0A	; 10
    1276:	98 9e       	mul	r9, r24
    1278:	20 0d       	add	r18, r0
    127a:	11 24       	eor	r1, r1
    127c:	92 2e       	mov	r9, r18
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <vfprintf+0xe6>
    1280:	ea e0       	ldi	r30, 0x0A	; 10
    1282:	2e 9e       	mul	r2, r30
    1284:	20 0d       	add	r18, r0
    1286:	11 24       	eor	r1, r1
    1288:	22 2e       	mov	r2, r18
    128a:	f3 2d       	mov	r31, r3
    128c:	f0 62       	ori	r31, 0x20	; 32
    128e:	3f 2e       	mov	r3, r31
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <vfprintf+0xe6>
    1292:	8c 36       	cpi	r24, 0x6C	; 108
    1294:	21 f4       	brne	.+8      	; 0x129e <vfprintf+0xe2>
    1296:	83 2d       	mov	r24, r3
    1298:	80 68       	ori	r24, 0x80	; 128
    129a:	38 2e       	mov	r3, r24
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <vfprintf+0xe6>
    129e:	88 36       	cpi	r24, 0x68	; 104
    12a0:	41 f4       	brne	.+16     	; 0x12b2 <vfprintf+0xf6>
    12a2:	f7 01       	movw	r30, r14
    12a4:	93 fd       	sbrc	r25, 3
    12a6:	85 91       	lpm	r24, Z+
    12a8:	93 ff       	sbrs	r25, 3
    12aa:	81 91       	ld	r24, Z+
    12ac:	7f 01       	movw	r14, r30
    12ae:	81 11       	cpse	r24, r1
    12b0:	b3 cf       	rjmp	.-154    	; 0x1218 <vfprintf+0x5c>
    12b2:	98 2f       	mov	r25, r24
    12b4:	9f 7d       	andi	r25, 0xDF	; 223
    12b6:	95 54       	subi	r25, 0x45	; 69
    12b8:	93 30       	cpi	r25, 0x03	; 3
    12ba:	28 f4       	brcc	.+10     	; 0x12c6 <vfprintf+0x10a>
    12bc:	0c 5f       	subi	r16, 0xFC	; 252
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	9f e3       	ldi	r25, 0x3F	; 63
    12c2:	99 83       	std	Y+1, r25	; 0x01
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <vfprintf+0x124>
    12c6:	83 36       	cpi	r24, 0x63	; 99
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <vfprintf+0x11a>
    12ca:	83 37       	cpi	r24, 0x73	; 115
    12cc:	71 f0       	breq	.+28     	; 0x12ea <vfprintf+0x12e>
    12ce:	83 35       	cpi	r24, 0x53	; 83
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <vfprintf+0x118>
    12d2:	59 c0       	rjmp	.+178    	; 0x1386 <vfprintf+0x1ca>
    12d4:	21 c0       	rjmp	.+66     	; 0x1318 <vfprintf+0x15c>
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	0e 5f       	subi	r16, 0xFE	; 254
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	88 24       	eor	r8, r8
    12e2:	83 94       	inc	r8
    12e4:	91 2c       	mov	r9, r1
    12e6:	53 01       	movw	r10, r6
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <vfprintf+0x154>
    12ea:	28 01       	movw	r4, r16
    12ec:	f2 e0       	ldi	r31, 0x02	; 2
    12ee:	4f 0e       	add	r4, r31
    12f0:	51 1c       	adc	r5, r1
    12f2:	f8 01       	movw	r30, r16
    12f4:	a0 80       	ld	r10, Z
    12f6:	b1 80       	ldd	r11, Z+1	; 0x01
    12f8:	36 fe       	sbrs	r3, 6
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <vfprintf+0x146>
    12fc:	69 2d       	mov	r22, r9
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <vfprintf+0x14a>
    1302:	6f ef       	ldi	r22, 0xFF	; 255
    1304:	7f ef       	ldi	r23, 0xFF	; 255
    1306:	c5 01       	movw	r24, r10
    1308:	0e 94 ca 0a 	call	0x1594	; 0x1594 <strnlen>
    130c:	4c 01       	movw	r8, r24
    130e:	82 01       	movw	r16, r4
    1310:	f3 2d       	mov	r31, r3
    1312:	ff 77       	andi	r31, 0x7F	; 127
    1314:	3f 2e       	mov	r3, r31
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <vfprintf+0x188>
    1318:	28 01       	movw	r4, r16
    131a:	22 e0       	ldi	r18, 0x02	; 2
    131c:	42 0e       	add	r4, r18
    131e:	51 1c       	adc	r5, r1
    1320:	f8 01       	movw	r30, r16
    1322:	a0 80       	ld	r10, Z
    1324:	b1 80       	ldd	r11, Z+1	; 0x01
    1326:	36 fe       	sbrs	r3, 6
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <vfprintf+0x174>
    132a:	69 2d       	mov	r22, r9
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0x178>
    1330:	6f ef       	ldi	r22, 0xFF	; 255
    1332:	7f ef       	ldi	r23, 0xFF	; 255
    1334:	c5 01       	movw	r24, r10
    1336:	0e 94 bf 0a 	call	0x157e	; 0x157e <strnlen_P>
    133a:	4c 01       	movw	r8, r24
    133c:	f3 2d       	mov	r31, r3
    133e:	f0 68       	ori	r31, 0x80	; 128
    1340:	3f 2e       	mov	r3, r31
    1342:	82 01       	movw	r16, r4
    1344:	33 fc       	sbrc	r3, 3
    1346:	1b c0       	rjmp	.+54     	; 0x137e <vfprintf+0x1c2>
    1348:	82 2d       	mov	r24, r2
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	88 16       	cp	r8, r24
    134e:	99 06       	cpc	r9, r25
    1350:	b0 f4       	brcc	.+44     	; 0x137e <vfprintf+0x1c2>
    1352:	b6 01       	movw	r22, r12
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    135c:	2a 94       	dec	r2
    135e:	f4 cf       	rjmp	.-24     	; 0x1348 <vfprintf+0x18c>
    1360:	f5 01       	movw	r30, r10
    1362:	37 fc       	sbrc	r3, 7
    1364:	85 91       	lpm	r24, Z+
    1366:	37 fe       	sbrs	r3, 7
    1368:	81 91       	ld	r24, Z+
    136a:	5f 01       	movw	r10, r30
    136c:	b6 01       	movw	r22, r12
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    1374:	21 10       	cpse	r2, r1
    1376:	2a 94       	dec	r2
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	82 1a       	sub	r8, r18
    137c:	91 08       	sbc	r9, r1
    137e:	81 14       	cp	r8, r1
    1380:	91 04       	cpc	r9, r1
    1382:	71 f7       	brne	.-36     	; 0x1360 <vfprintf+0x1a4>
    1384:	e8 c0       	rjmp	.+464    	; 0x1556 <vfprintf+0x39a>
    1386:	84 36       	cpi	r24, 0x64	; 100
    1388:	11 f0       	breq	.+4      	; 0x138e <vfprintf+0x1d2>
    138a:	89 36       	cpi	r24, 0x69	; 105
    138c:	41 f5       	brne	.+80     	; 0x13de <vfprintf+0x222>
    138e:	f8 01       	movw	r30, r16
    1390:	37 fe       	sbrs	r3, 7
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <vfprintf+0x1e6>
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	0c 5f       	subi	r16, 0xFC	; 252
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	08 c0       	rjmp	.+16     	; 0x13b2 <vfprintf+0x1f6>
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	07 2e       	mov	r0, r23
    13a8:	00 0c       	add	r0, r0
    13aa:	88 0b       	sbc	r24, r24
    13ac:	99 0b       	sbc	r25, r25
    13ae:	0e 5f       	subi	r16, 0xFE	; 254
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	f3 2d       	mov	r31, r3
    13b4:	ff 76       	andi	r31, 0x6F	; 111
    13b6:	3f 2e       	mov	r3, r31
    13b8:	97 ff       	sbrs	r25, 7
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <vfprintf+0x212>
    13bc:	90 95       	com	r25
    13be:	80 95       	com	r24
    13c0:	70 95       	com	r23
    13c2:	61 95       	neg	r22
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	8f 4f       	sbci	r24, 0xFF	; 255
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	f0 68       	ori	r31, 0x80	; 128
    13cc:	3f 2e       	mov	r3, r31
    13ce:	2a e0       	ldi	r18, 0x0A	; 10
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	a3 01       	movw	r20, r6
    13d4:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ultoa_invert>
    13d8:	88 2e       	mov	r8, r24
    13da:	86 18       	sub	r8, r6
    13dc:	45 c0       	rjmp	.+138    	; 0x1468 <vfprintf+0x2ac>
    13de:	85 37       	cpi	r24, 0x75	; 117
    13e0:	31 f4       	brne	.+12     	; 0x13ee <vfprintf+0x232>
    13e2:	23 2d       	mov	r18, r3
    13e4:	2f 7e       	andi	r18, 0xEF	; 239
    13e6:	b2 2e       	mov	r11, r18
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	25 c0       	rjmp	.+74     	; 0x1438 <vfprintf+0x27c>
    13ee:	93 2d       	mov	r25, r3
    13f0:	99 7f       	andi	r25, 0xF9	; 249
    13f2:	b9 2e       	mov	r11, r25
    13f4:	8f 36       	cpi	r24, 0x6F	; 111
    13f6:	c1 f0       	breq	.+48     	; 0x1428 <vfprintf+0x26c>
    13f8:	18 f4       	brcc	.+6      	; 0x1400 <vfprintf+0x244>
    13fa:	88 35       	cpi	r24, 0x58	; 88
    13fc:	79 f0       	breq	.+30     	; 0x141c <vfprintf+0x260>
    13fe:	b5 c0       	rjmp	.+362    	; 0x156a <vfprintf+0x3ae>
    1400:	80 37       	cpi	r24, 0x70	; 112
    1402:	19 f0       	breq	.+6      	; 0x140a <vfprintf+0x24e>
    1404:	88 37       	cpi	r24, 0x78	; 120
    1406:	21 f0       	breq	.+8      	; 0x1410 <vfprintf+0x254>
    1408:	b0 c0       	rjmp	.+352    	; 0x156a <vfprintf+0x3ae>
    140a:	e9 2f       	mov	r30, r25
    140c:	e0 61       	ori	r30, 0x10	; 16
    140e:	be 2e       	mov	r11, r30
    1410:	b4 fe       	sbrs	r11, 4
    1412:	0d c0       	rjmp	.+26     	; 0x142e <vfprintf+0x272>
    1414:	fb 2d       	mov	r31, r11
    1416:	f4 60       	ori	r31, 0x04	; 4
    1418:	bf 2e       	mov	r11, r31
    141a:	09 c0       	rjmp	.+18     	; 0x142e <vfprintf+0x272>
    141c:	34 fe       	sbrs	r3, 4
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <vfprintf+0x278>
    1420:	29 2f       	mov	r18, r25
    1422:	26 60       	ori	r18, 0x06	; 6
    1424:	b2 2e       	mov	r11, r18
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <vfprintf+0x278>
    1428:	28 e0       	ldi	r18, 0x08	; 8
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <vfprintf+0x27c>
    142e:	20 e1       	ldi	r18, 0x10	; 16
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x27c>
    1434:	20 e1       	ldi	r18, 0x10	; 16
    1436:	32 e0       	ldi	r19, 0x02	; 2
    1438:	f8 01       	movw	r30, r16
    143a:	b7 fe       	sbrs	r11, 7
    143c:	07 c0       	rjmp	.+14     	; 0x144c <vfprintf+0x290>
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	0c 5f       	subi	r16, 0xFC	; 252
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x29c>
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 5f       	subi	r16, 0xFE	; 254
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	a3 01       	movw	r20, r6
    145a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__ultoa_invert>
    145e:	88 2e       	mov	r8, r24
    1460:	86 18       	sub	r8, r6
    1462:	fb 2d       	mov	r31, r11
    1464:	ff 77       	andi	r31, 0x7F	; 127
    1466:	3f 2e       	mov	r3, r31
    1468:	36 fe       	sbrs	r3, 6
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <vfprintf+0x2ca>
    146c:	23 2d       	mov	r18, r3
    146e:	2e 7f       	andi	r18, 0xFE	; 254
    1470:	a2 2e       	mov	r10, r18
    1472:	89 14       	cp	r8, r9
    1474:	58 f4       	brcc	.+22     	; 0x148c <vfprintf+0x2d0>
    1476:	34 fe       	sbrs	r3, 4
    1478:	0b c0       	rjmp	.+22     	; 0x1490 <vfprintf+0x2d4>
    147a:	32 fc       	sbrc	r3, 2
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <vfprintf+0x2d4>
    147e:	83 2d       	mov	r24, r3
    1480:	8e 7e       	andi	r24, 0xEE	; 238
    1482:	a8 2e       	mov	r10, r24
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <vfprintf+0x2d4>
    1486:	b8 2c       	mov	r11, r8
    1488:	a3 2c       	mov	r10, r3
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <vfprintf+0x2d6>
    148c:	b8 2c       	mov	r11, r8
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <vfprintf+0x2d6>
    1490:	b9 2c       	mov	r11, r9
    1492:	a4 fe       	sbrs	r10, 4
    1494:	0f c0       	rjmp	.+30     	; 0x14b4 <vfprintf+0x2f8>
    1496:	fe 01       	movw	r30, r28
    1498:	e8 0d       	add	r30, r8
    149a:	f1 1d       	adc	r31, r1
    149c:	80 81       	ld	r24, Z
    149e:	80 33       	cpi	r24, 0x30	; 48
    14a0:	21 f4       	brne	.+8      	; 0x14aa <vfprintf+0x2ee>
    14a2:	9a 2d       	mov	r25, r10
    14a4:	99 7e       	andi	r25, 0xE9	; 233
    14a6:	a9 2e       	mov	r10, r25
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <vfprintf+0x300>
    14aa:	a2 fe       	sbrs	r10, 2
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <vfprintf+0x2fe>
    14ae:	b3 94       	inc	r11
    14b0:	b3 94       	inc	r11
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <vfprintf+0x300>
    14b4:	8a 2d       	mov	r24, r10
    14b6:	86 78       	andi	r24, 0x86	; 134
    14b8:	09 f0       	breq	.+2      	; 0x14bc <vfprintf+0x300>
    14ba:	b3 94       	inc	r11
    14bc:	a3 fc       	sbrc	r10, 3
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <vfprintf+0x326>
    14c0:	a0 fe       	sbrs	r10, 0
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <vfprintf+0x314>
    14c4:	b2 14       	cp	r11, r2
    14c6:	88 f4       	brcc	.+34     	; 0x14ea <vfprintf+0x32e>
    14c8:	28 0c       	add	r2, r8
    14ca:	92 2c       	mov	r9, r2
    14cc:	9b 18       	sub	r9, r11
    14ce:	0e c0       	rjmp	.+28     	; 0x14ec <vfprintf+0x330>
    14d0:	b2 14       	cp	r11, r2
    14d2:	60 f4       	brcc	.+24     	; 0x14ec <vfprintf+0x330>
    14d4:	b6 01       	movw	r22, r12
    14d6:	80 e2       	ldi	r24, 0x20	; 32
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    14de:	b3 94       	inc	r11
    14e0:	f7 cf       	rjmp	.-18     	; 0x14d0 <vfprintf+0x314>
    14e2:	b2 14       	cp	r11, r2
    14e4:	18 f4       	brcc	.+6      	; 0x14ec <vfprintf+0x330>
    14e6:	2b 18       	sub	r2, r11
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x332>
    14ea:	98 2c       	mov	r9, r8
    14ec:	21 2c       	mov	r2, r1
    14ee:	a4 fe       	sbrs	r10, 4
    14f0:	10 c0       	rjmp	.+32     	; 0x1512 <vfprintf+0x356>
    14f2:	b6 01       	movw	r22, r12
    14f4:	80 e3       	ldi	r24, 0x30	; 48
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    14fc:	a2 fe       	sbrs	r10, 2
    14fe:	17 c0       	rjmp	.+46     	; 0x152e <vfprintf+0x372>
    1500:	a1 fc       	sbrc	r10, 1
    1502:	03 c0       	rjmp	.+6      	; 0x150a <vfprintf+0x34e>
    1504:	88 e7       	ldi	r24, 0x78	; 120
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <vfprintf+0x352>
    150a:	88 e5       	ldi	r24, 0x58	; 88
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	b6 01       	movw	r22, r12
    1510:	0c c0       	rjmp	.+24     	; 0x152a <vfprintf+0x36e>
    1512:	8a 2d       	mov	r24, r10
    1514:	86 78       	andi	r24, 0x86	; 134
    1516:	59 f0       	breq	.+22     	; 0x152e <vfprintf+0x372>
    1518:	a1 fe       	sbrs	r10, 1
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <vfprintf+0x364>
    151c:	8b e2       	ldi	r24, 0x2B	; 43
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <vfprintf+0x366>
    1520:	80 e2       	ldi	r24, 0x20	; 32
    1522:	a7 fc       	sbrc	r10, 7
    1524:	8d e2       	ldi	r24, 0x2D	; 45
    1526:	b6 01       	movw	r22, r12
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    152e:	89 14       	cp	r8, r9
    1530:	38 f4       	brcc	.+14     	; 0x1540 <vfprintf+0x384>
    1532:	b6 01       	movw	r22, r12
    1534:	80 e3       	ldi	r24, 0x30	; 48
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    153c:	9a 94       	dec	r9
    153e:	f7 cf       	rjmp	.-18     	; 0x152e <vfprintf+0x372>
    1540:	8a 94       	dec	r8
    1542:	f3 01       	movw	r30, r6
    1544:	e8 0d       	add	r30, r8
    1546:	f1 1d       	adc	r31, r1
    1548:	80 81       	ld	r24, Z
    154a:	b6 01       	movw	r22, r12
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    1552:	81 10       	cpse	r8, r1
    1554:	f5 cf       	rjmp	.-22     	; 0x1540 <vfprintf+0x384>
    1556:	22 20       	and	r2, r2
    1558:	09 f4       	brne	.+2      	; 0x155c <vfprintf+0x3a0>
    155a:	42 ce       	rjmp	.-892    	; 0x11e0 <vfprintf+0x24>
    155c:	b6 01       	movw	r22, r12
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputc>
    1566:	2a 94       	dec	r2
    1568:	f6 cf       	rjmp	.-20     	; 0x1556 <vfprintf+0x39a>
    156a:	f6 01       	movw	r30, r12
    156c:	86 81       	ldd	r24, Z+6	; 0x06
    156e:	97 81       	ldd	r25, Z+7	; 0x07
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <vfprintf+0x3ba>
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    1574:	9f ef       	ldi	r25, 0xFF	; 255
    1576:	2b 96       	adiw	r28, 0x0b	; 11
    1578:	e2 e1       	ldi	r30, 0x12	; 18
    157a:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__epilogue_restores__>

0000157e <strnlen_P>:
    157e:	fc 01       	movw	r30, r24
    1580:	05 90       	lpm	r0, Z+
    1582:	61 50       	subi	r22, 0x01	; 1
    1584:	70 40       	sbci	r23, 0x00	; 0
    1586:	01 10       	cpse	r0, r1
    1588:	d8 f7       	brcc	.-10     	; 0x1580 <strnlen_P+0x2>
    158a:	80 95       	com	r24
    158c:	90 95       	com	r25
    158e:	8e 0f       	add	r24, r30
    1590:	9f 1f       	adc	r25, r31
    1592:	08 95       	ret

00001594 <strnlen>:
    1594:	fc 01       	movw	r30, r24
    1596:	61 50       	subi	r22, 0x01	; 1
    1598:	70 40       	sbci	r23, 0x00	; 0
    159a:	01 90       	ld	r0, Z+
    159c:	01 10       	cpse	r0, r1
    159e:	d8 f7       	brcc	.-10     	; 0x1596 <strnlen+0x2>
    15a0:	80 95       	com	r24
    15a2:	90 95       	com	r25
    15a4:	8e 0f       	add	r24, r30
    15a6:	9f 1f       	adc	r25, r31
    15a8:	08 95       	ret

000015aa <fputc>:
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	fb 01       	movw	r30, r22
    15b4:	23 81       	ldd	r18, Z+3	; 0x03
    15b6:	21 fd       	sbrc	r18, 1
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <fputc+0x16>
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	9f ef       	ldi	r25, 0xFF	; 255
    15be:	2c c0       	rjmp	.+88     	; 0x1618 <fputc+0x6e>
    15c0:	22 ff       	sbrs	r18, 2
    15c2:	16 c0       	rjmp	.+44     	; 0x15f0 <fputc+0x46>
    15c4:	46 81       	ldd	r20, Z+6	; 0x06
    15c6:	57 81       	ldd	r21, Z+7	; 0x07
    15c8:	24 81       	ldd	r18, Z+4	; 0x04
    15ca:	35 81       	ldd	r19, Z+5	; 0x05
    15cc:	42 17       	cp	r20, r18
    15ce:	53 07       	cpc	r21, r19
    15d0:	44 f4       	brge	.+16     	; 0x15e2 <fputc+0x38>
    15d2:	a0 81       	ld	r26, Z
    15d4:	b1 81       	ldd	r27, Z+1	; 0x01
    15d6:	9d 01       	movw	r18, r26
    15d8:	2f 5f       	subi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	31 83       	std	Z+1, r19	; 0x01
    15de:	20 83       	st	Z, r18
    15e0:	8c 93       	st	X, r24
    15e2:	26 81       	ldd	r18, Z+6	; 0x06
    15e4:	37 81       	ldd	r19, Z+7	; 0x07
    15e6:	2f 5f       	subi	r18, 0xFF	; 255
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	37 83       	std	Z+7, r19	; 0x07
    15ec:	26 83       	std	Z+6, r18	; 0x06
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <fputc+0x6e>
    15f0:	8b 01       	movw	r16, r22
    15f2:	ec 01       	movw	r28, r24
    15f4:	fb 01       	movw	r30, r22
    15f6:	00 84       	ldd	r0, Z+8	; 0x08
    15f8:	f1 85       	ldd	r31, Z+9	; 0x09
    15fa:	e0 2d       	mov	r30, r0
    15fc:	09 95       	icall
    15fe:	89 2b       	or	r24, r25
    1600:	e1 f6       	brne	.-72     	; 0x15ba <fputc+0x10>
    1602:	d8 01       	movw	r26, r16
    1604:	16 96       	adiw	r26, 0x06	; 6
    1606:	8d 91       	ld	r24, X+
    1608:	9c 91       	ld	r25, X
    160a:	17 97       	sbiw	r26, 0x07	; 7
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	17 96       	adiw	r26, 0x07	; 7
    1610:	9c 93       	st	X, r25
    1612:	8e 93       	st	-X, r24
    1614:	16 97       	sbiw	r26, 0x06	; 6
    1616:	ce 01       	movw	r24, r28
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <__ultoa_invert>:
    1622:	fa 01       	movw	r30, r20
    1624:	aa 27       	eor	r26, r26
    1626:	28 30       	cpi	r18, 0x08	; 8
    1628:	51 f1       	breq	.+84     	; 0x167e <__ultoa_invert+0x5c>
    162a:	20 31       	cpi	r18, 0x10	; 16
    162c:	81 f1       	breq	.+96     	; 0x168e <__ultoa_invert+0x6c>
    162e:	e8 94       	clt
    1630:	6f 93       	push	r22
    1632:	6e 7f       	andi	r22, 0xFE	; 254
    1634:	6e 5f       	subi	r22, 0xFE	; 254
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	8f 4f       	sbci	r24, 0xFF	; 255
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	af 4f       	sbci	r26, 0xFF	; 255
    163e:	b1 e0       	ldi	r27, 0x01	; 1
    1640:	3e d0       	rcall	.+124    	; 0x16be <__ultoa_invert+0x9c>
    1642:	b4 e0       	ldi	r27, 0x04	; 4
    1644:	3c d0       	rcall	.+120    	; 0x16be <__ultoa_invert+0x9c>
    1646:	67 0f       	add	r22, r23
    1648:	78 1f       	adc	r23, r24
    164a:	89 1f       	adc	r24, r25
    164c:	9a 1f       	adc	r25, r26
    164e:	a1 1d       	adc	r26, r1
    1650:	68 0f       	add	r22, r24
    1652:	79 1f       	adc	r23, r25
    1654:	8a 1f       	adc	r24, r26
    1656:	91 1d       	adc	r25, r1
    1658:	a1 1d       	adc	r26, r1
    165a:	6a 0f       	add	r22, r26
    165c:	71 1d       	adc	r23, r1
    165e:	81 1d       	adc	r24, r1
    1660:	91 1d       	adc	r25, r1
    1662:	a1 1d       	adc	r26, r1
    1664:	20 d0       	rcall	.+64     	; 0x16a6 <__ultoa_invert+0x84>
    1666:	09 f4       	brne	.+2      	; 0x166a <__ultoa_invert+0x48>
    1668:	68 94       	set
    166a:	3f 91       	pop	r19
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	26 9f       	mul	r18, r22
    1670:	11 24       	eor	r1, r1
    1672:	30 19       	sub	r19, r0
    1674:	30 5d       	subi	r19, 0xD0	; 208
    1676:	31 93       	st	Z+, r19
    1678:	de f6       	brtc	.-74     	; 0x1630 <__ultoa_invert+0xe>
    167a:	cf 01       	movw	r24, r30
    167c:	08 95       	ret
    167e:	46 2f       	mov	r20, r22
    1680:	47 70       	andi	r20, 0x07	; 7
    1682:	40 5d       	subi	r20, 0xD0	; 208
    1684:	41 93       	st	Z+, r20
    1686:	b3 e0       	ldi	r27, 0x03	; 3
    1688:	0f d0       	rcall	.+30     	; 0x16a8 <__ultoa_invert+0x86>
    168a:	c9 f7       	brne	.-14     	; 0x167e <__ultoa_invert+0x5c>
    168c:	f6 cf       	rjmp	.-20     	; 0x167a <__ultoa_invert+0x58>
    168e:	46 2f       	mov	r20, r22
    1690:	4f 70       	andi	r20, 0x0F	; 15
    1692:	40 5d       	subi	r20, 0xD0	; 208
    1694:	4a 33       	cpi	r20, 0x3A	; 58
    1696:	18 f0       	brcs	.+6      	; 0x169e <__ultoa_invert+0x7c>
    1698:	49 5d       	subi	r20, 0xD9	; 217
    169a:	31 fd       	sbrc	r19, 1
    169c:	40 52       	subi	r20, 0x20	; 32
    169e:	41 93       	st	Z+, r20
    16a0:	02 d0       	rcall	.+4      	; 0x16a6 <__ultoa_invert+0x84>
    16a2:	a9 f7       	brne	.-22     	; 0x168e <__ultoa_invert+0x6c>
    16a4:	ea cf       	rjmp	.-44     	; 0x167a <__ultoa_invert+0x58>
    16a6:	b4 e0       	ldi	r27, 0x04	; 4
    16a8:	a6 95       	lsr	r26
    16aa:	97 95       	ror	r25
    16ac:	87 95       	ror	r24
    16ae:	77 95       	ror	r23
    16b0:	67 95       	ror	r22
    16b2:	ba 95       	dec	r27
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <__ultoa_invert+0x86>
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	61 05       	cpc	r22, r1
    16ba:	71 05       	cpc	r23, r1
    16bc:	08 95       	ret
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
    16c2:	0a 2e       	mov	r0, r26
    16c4:	06 94       	lsr	r0
    16c6:	57 95       	ror	r21
    16c8:	47 95       	ror	r20
    16ca:	37 95       	ror	r19
    16cc:	27 95       	ror	r18
    16ce:	ba 95       	dec	r27
    16d0:	c9 f7       	brne	.-14     	; 0x16c4 <__ultoa_invert+0xa2>
    16d2:	62 0f       	add	r22, r18
    16d4:	73 1f       	adc	r23, r19
    16d6:	84 1f       	adc	r24, r20
    16d8:	95 1f       	adc	r25, r21
    16da:	a0 1d       	adc	r26, r0
    16dc:	08 95       	ret

000016de <__prologue_saves__>:
    16de:	2f 92       	push	r2
    16e0:	3f 92       	push	r3
    16e2:	4f 92       	push	r4
    16e4:	5f 92       	push	r5
    16e6:	6f 92       	push	r6
    16e8:	7f 92       	push	r7
    16ea:	8f 92       	push	r8
    16ec:	9f 92       	push	r9
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	ca 1b       	sub	r28, r26
    1708:	db 0b       	sbc	r29, r27
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	09 94       	ijmp

00001716 <__epilogue_restores__>:
    1716:	2a 88       	ldd	r2, Y+18	; 0x12
    1718:	39 88       	ldd	r3, Y+17	; 0x11
    171a:	48 88       	ldd	r4, Y+16	; 0x10
    171c:	5f 84       	ldd	r5, Y+15	; 0x0f
    171e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1720:	7d 84       	ldd	r7, Y+13	; 0x0d
    1722:	8c 84       	ldd	r8, Y+12	; 0x0c
    1724:	9b 84       	ldd	r9, Y+11	; 0x0b
    1726:	aa 84       	ldd	r10, Y+10	; 0x0a
    1728:	b9 84       	ldd	r11, Y+9	; 0x09
    172a:	c8 84       	ldd	r12, Y+8	; 0x08
    172c:	df 80       	ldd	r13, Y+7	; 0x07
    172e:	ee 80       	ldd	r14, Y+6	; 0x06
    1730:	fd 80       	ldd	r15, Y+5	; 0x05
    1732:	0c 81       	ldd	r16, Y+4	; 0x04
    1734:	1b 81       	ldd	r17, Y+3	; 0x03
    1736:	aa 81       	ldd	r26, Y+2	; 0x02
    1738:	b9 81       	ldd	r27, Y+1	; 0x01
    173a:	ce 0f       	add	r28, r30
    173c:	d1 1d       	adc	r29, r1
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	ed 01       	movw	r28, r26
    174a:	08 95       	ret

0000174c <_exit>:
    174c:	f8 94       	cli

0000174e <__stop_program>:
    174e:	ff cf       	rjmp	.-2      	; 0x174e <__stop_program>
